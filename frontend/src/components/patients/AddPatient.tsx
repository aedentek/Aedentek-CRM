import React, { useState } from 'react';
import { DatabaseService } from '@/services/databaseService';
import { uploadPatientFile, getFileUrl } from '@/services/simpleFileUpload';
import { uploadPatientFileSimple, movePatientFiles } from '@/services/simpleUpload';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { toast } from '@/hooks/use-toast';
import { CalendarIcon, Upload, UserPlus, FileText, Phone, Mail, MapPin, Heart, UserCheck } from 'lucide-react';
import { format } from 'date-fns';
import { cn } from '@/lib/utils';
import { useNavigate } from 'react-router-dom';
import usePageTitle from '@/hooks/usePageTitle';
import '../../styles/selective-header-buttons-new.css';

interface Patient {
  id: string;
  name: string;
  age: number;
  gender: string;
  phone: string;
  email: string;
  address: string;
  emergencyContact: string;
  medicalHistory: string;
  admissionDate: Date;
  status: string;
  attenderName: string;
  attenderPhone: string;
  photo: string;
  fees: number;
  bloodTest: number;
  pickupCharge: number;
  totalAmount: number;
  payAmount: number;
  balance: number;
  paymentType: string;
  fatherName: string;
  motherName: string;
  attenderRelationship: string;
  dateOfBirth: Date;
  marriageStatus: string;
  employeeStatus: string;
  documents: {
    patientAadhar?: File;
    patientPan?: File;
    attenderAadhar?: File;
    attenderPan?: File;
  };
}

const AddPatient: React.FC = () => {
  // Set page title
  usePageTitle();

  React.useEffect(() => {
    const original = document.body.style.overflowX;
    document.body.style.overflowX = 'hidden';
    return () => {
      document.body.style.overflowX = original;
    };
  }, []);
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [admissionDate, setAdmissionDate] = useState<Date>();
  const [dateOfBirth, setDateOfBirth] = useState<Date>();
  const [photo, setPhoto] = useState<File | null>(null);
  
  const [formData, setFormData] = useState({
    name: '',
    age: '',
    gender: '',
    phone: '',
    email: '',
    address: '',
    emergencyContact: '',
    medicalHistory: '',
    status: 'Active',
    attenderName: '',
    attenderPhone: '',
    fees: '',
    bloodTest: '',
    pickupCharge: '',
    otherFees: '',
    totalAmount: '',
    payAmount: '',
    balance: '',
    paymentType: '',
    fatherName: '',
    motherName: '',
    attenderRelationship: '',
    marriageStatus: '',
    employeeStatus: ''
  });

  const [documents, setDocuments] = useState({
    patientAadhar: null as File | null,
    patientPan: null as File | null,
    attenderAadhar: null as File | null,
    attenderPan: null as File | null
  });

  // Patient ID will be auto-generated by backend (MySQL AUTO_INCREMENT)

  const handleInputChange = (field: string, value: string) => {
    // Phone number validation - only allow 10 digits
    if (field === 'phone' || field === 'emergencyContact' || field === 'attenderPhone') {
      const numericValue = value.replace(/\D/g, '');
      if (numericValue.length <= 10) {
        setFormData(prev => ({
          ...prev,
          [field]: numericValue
        }));
      }
    } else if (field === 'fees' || field === 'bloodTest' || field === 'pickupCharge' || field === 'payAmount') {
      // Handle numeric fields with automatic calculation
      const newData = { ...formData, [field]: value };
      
      if (field === 'fees' || field === 'bloodTest' || field === 'pickupCharge') {
        const fees = parseFloat(newData.fees) || 0;
        const bloodTest = parseFloat(newData.bloodTest) || 0;
        const pickupCharge = parseFloat(newData.pickupCharge) || 0;
        
        // Calculate otherFees (bloodTest + pickupCharge)
        const otherFees = bloodTest + pickupCharge;
        newData.otherFees = otherFees.toString();
        
        const total = fees + bloodTest + pickupCharge;
        newData.totalAmount = total.toString();
        
        const payAmount = parseFloat(newData.payAmount) || 0;
        newData.balance = (total - payAmount).toString();
      } else if (field === 'payAmount') {
        const totalAmount = parseFloat(newData.totalAmount) || 0;
        const payAmount = parseFloat(value) || 0;
        newData.balance = (totalAmount - payAmount).toString();
      }
      
      setFormData(prev => ({
        ...prev,
        ...newData
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }
  };

  // File size validation function (5MB limit)
  const validateFileSize = (file: File | null): boolean => {
    if (!file) return true; // Allow null files
    
    const maxSizeInBytes = 5 * 1024 * 1024; // 5MB in bytes
    
    if (file.size > maxSizeInBytes) {
      toast({
        title: "File Too Large",
        description: `File size must be less than 5MB. Current file size: ${(file.size / (1024 * 1024)).toFixed(2)}MB`,
        variant: "destructive",
      });
      return false;
    }
    return true;
  };

  // Handle photo upload with validation
  const handlePhotoUpload = (file: File | null) => {
    if (!validateFileSize(file)) {
      return; // Don't update state if file is too large
    }
    
    setPhoto(file);
    
    if (file) {
      toast({
        title: "Photo Selected",
        description: `${file.name} (${(file.size / (1024 * 1024)).toFixed(2)}MB) selected successfully`,
      });
    }
  };

  const handleFileUpload = (field: keyof typeof documents, file: File | null) => {
    if (!validateFileSize(file)) {
      return; // Don't update state if file is too large
    }
    
    setDocuments(prev => ({
      ...prev,
      [field]: file
    }));

    if (file) {
      toast({
        title: "File Selected",
        description: `${file.name} (${(file.size / (1024 * 1024)).toFixed(2)}MB) selected successfully`,
      });
    }
  };

  // Test function to debug upload issues
  const testUpload = async () => {
    if (!photo) {
      toast({
        title: "Test Upload",
        description: "Please select a photo first to test upload",
        variant: "destructive",
      });
      return;
    }

    try {
      console.log('🧪 Testing upload with photo:', photo.name);
      console.log('🧪 Photo details:', {
        size: photo.size,
        type: photo.type,
        name: photo.name
      });

      // Test direct API call
      const formData = new FormData();
      formData.append('file', photo);
      formData.append('patientId', 'TEST');
      formData.append('fieldName', 'photo');

      console.log('🧪 Making direct API call to /api/upload-patient-file');
      
      const response = await fetch('/api/upload-patient-file', {
        method: 'POST',
        body: formData,
      });

      console.log('🧪 Response status:', response.status);
      console.log('🧪 Response headers:', [...response.headers.entries()]);

      const responseText = await response.text();
      console.log('🧪 Response text:', responseText);

      if (response.ok) {
        const result = JSON.parse(responseText);
        toast({
          title: "Test Upload Successful",
          description: `File uploaded: ${result.filename}`,
        });
      } else {
        toast({
          title: "Test Upload Failed",
          description: `Status: ${response.status} - ${responseText}`,
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('🧪 Test upload error:', error);
      toast({
        title: "Test Upload Error",
        description: `Error: ${error.message}`,
        variant: "destructive",
      });
    }
  };
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    
    console.log('🚀 Form submission started');
    console.log('📝 Current form data:', formData);
    
    try {
      // Validate required fields
      if (!formData.name.trim()) {
        toast({
          title: "Validation Error",
          description: "Patient name is required.",
          variant: "destructive",
        });
        setLoading(false);
        return;
      }

      if (!formData.age || parseInt(formData.age) <= 0) {
        toast({
          title: "Validation Error",
          description: "Valid age is required.",
          variant: "destructive",
        });
        setLoading(false);
        return;
      }

      if (!formData.gender) {
        toast({
          title: "Validation Error",
          description: "Gender is required.",
          variant: "destructive",
        });
        setLoading(false);
        return;
      }

      if (!formData.phone.trim()) {
        toast({
          title: "Validation Error",
          description: "Phone number is required.",
          variant: "destructive",
        });
        setLoading(false);
        return;
      }

      if (!formData.address.trim()) {
        toast({
          title: "Validation Error",
          description: "Address is required.",
          variant: "destructive",
        });
        setLoading(false);
        return;
      }

      if (!formData.emergencyContact.trim()) {
        toast({
          title: "Validation Error",
          description: "Emergency contact is required.",
          variant: "destructive",
        });
        setLoading(false);
        return;
      }

      // First create the patient without files to get a patient ID
      const patientDataWithoutFiles = {
        name: formData.name.trim(),
        age: parseInt(formData.age),
        gender: formData.gender,
        phone: formData.phone.trim(),
        email: formData.email.trim(),
        address: formData.address.trim(),
        emergencyContact: formData.emergencyContact.trim(),
        medicalHistory: formData.medicalHistory.trim(),
        admissionDate: admissionDate ? format(admissionDate, "dd-MM-yyyy") : format(new Date(), "dd-MM-yyyy"),
        status: formData.status,
        attenderName: formData.attenderName.trim(),
        attenderPhone: formData.attenderPhone.trim(),
        fees: parseFloat(formData.fees) || 0,
        bloodTest: parseFloat(formData.bloodTest) || 0,
        pickupCharge: parseFloat(formData.pickupCharge) || 0,
        otherFees: (parseFloat(formData.bloodTest) || 0) + (parseFloat(formData.pickupCharge) || 0),
        totalAmount: parseFloat(formData.totalAmount) || 0,
        payAmount: parseFloat(formData.payAmount) || 0,
        balance: parseFloat(formData.balance) || 0,
        paymentType: formData.paymentType,
        fatherName: formData.fatherName.trim(),
        motherName: formData.motherName.trim(),
        attenderRelationship: formData.attenderRelationship,
        dateOfBirth: dateOfBirth ? format(dateOfBirth, "dd-MM-yyyy") : '',
        marriageStatus: formData.marriageStatus,
        employeeStatus: formData.employeeStatus,
        // Set file paths as empty initially
        photo: '',
        patientAadhar: '',
        patientPan: '',
        attenderAadhar: '',
        attenderPan: ''
      };

      console.log('🚀 Creating patient first, then uploading files...');
      const addPatientResponse = await DatabaseService.addPatient(patientDataWithoutFiles);
      console.log('✅ Patient created successfully:', addPatientResponse);
      
      // Get the patient ID from the response
      const newPatientId = addPatientResponse.id || addPatientResponse.patient?.id;
      const patientIdFormatted = addPatientResponse.patient_id || addPatientResponse.patient?.patient_id;
      
      if (!patientIdFormatted) {
        throw new Error('Failed to get patient ID from response');
      }
      
      console.log('� Now uploading files for patient:', patientIdFormatted);
      
      // Now upload files directly to the patient's folder
      let photoPath = '';
      let patientAadharPath = '';
      let patientPanPath = '';
      let attenderAadharPath = '';
      let attenderPanPath = '';

      // Upload files directly to patient folder
      if (photo) {
        try {
          console.log('� Uploading photo for patient:', patientIdFormatted);
          photoPath = await uploadPatientFileSimple(photo, patientIdFormatted, 'photo');
          console.log('✅ Photo uploaded successfully:', photoPath);
        } catch (error) {
          console.error('❌ Photo upload failed:', error);
          toast({
            title: "Photo Upload Warning",
            description: `Photo upload failed: ${error.message}. Patient created without photo.`,
            variant: "destructive",
          });
        }
      }

      if (documents.patientAadhar) {
        try {
          patientAadharPath = await uploadPatientFileSimple(documents.patientAadhar, patientIdFormatted, 'patientAadhar');
          console.log('✅ Patient Aadhar uploaded successfully:', patientAadharPath);
        } catch (error) {
          console.error('❌ Patient Aadhar upload failed:', error);
        }
      }
      
      if (documents.patientPan) {
        try {
          patientPanPath = await uploadPatientFileSimple(documents.patientPan, patientIdFormatted, 'patientPan');
          console.log('✅ Patient PAN uploaded successfully:', patientPanPath);
        } catch (error) {
          console.error('❌ Patient PAN upload failed:', error);
        }
      }
      
      if (documents.attenderAadhar) {
        try {
          attenderAadharPath = await uploadPatientFileSimple(documents.attenderAadhar, patientIdFormatted, 'attenderAadhar');
          console.log('✅ Attender Aadhar uploaded successfully:', attenderAadharPath);
        } catch (error) {
          console.error('❌ Attender Aadhar upload failed:', error);
        }
      }
      
      if (documents.attenderPan) {
        try {
          attenderPanPath = await uploadPatientFileSimple(documents.attenderPan, patientIdFormatted, 'attenderPan');
          console.log('✅ Attender PAN uploaded successfully:', attenderPanPath);
        } catch (error) {
          console.error('❌ Attender PAN upload failed:', error);
        }
      }

      // Update patient record with file paths if any files were uploaded
      if (photoPath || patientAadharPath || patientPanPath || attenderAadharPath || attenderPanPath) {
        try {
          console.log('📝 Updating patient record with file paths...');
          await DatabaseService.updatePatient(newPatientId, {
            photo: photoPath,
            patientAadhar: patientAadharPath,
            patientPan: patientPanPath,
            attenderAadhar: attenderAadharPath,
            attenderPan: attenderPanPath
          });
          console.log('✅ Patient record updated with file paths');
        } catch (updateError) {
          console.error('❌ Failed to update patient with file paths:', updateError);
          toast({
            title: "File Update Warning",
            description: "Patient created successfully, but file paths could not be saved.",
            variant: "destructive",
          });
        }
      }
      
      
      // Sync payment data to patient_payments table if there's a payment amount
      const payAmount = Number(formData.payAmount || 0);
      const monthlyFees = Number(formData.fees || 0);
      const bloodTest = Number(formData.bloodTest || 0);
      const pickupCharge = Number(formData.pickupCharge || 0);
      const totalAmount = monthlyFees + bloodTest + pickupCharge;
      
      if (totalAmount > 0 || payAmount > 0) {
        try {
          const balance = totalAmount - payAmount;
          
          const paymentData = {
            patient_id: newPatientId,
            patient_name: formData.name,
            monthly_fees: monthlyFees,
            other_fees: bloodTest + pickupCharge,
            carry_forward: 0,
            paid_amount: payAmount,
            total_balance: balance,
            payment_status: balance <= 0 ? 'Paid' : (payAmount > 0 ? 'Partial' : 'Pending'),
            payment_type: formData.paymentType || 'Cash',
            payment_date: new Date().toISOString().split('T')[0],
            description: `Payment record for ${formData.name}`,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          };
          console.log('💰 Payment data to be saved:', paymentData);
          // Temporarily comment out the payment saving to debug patient creation
          // await DatabaseService.addPatientPayment(paymentData);
          console.log('💰 Payment sync temporarily disabled for debugging');
        } catch (paymentError) {
          console.warn('Failed to sync payment data for new patient:', paymentError);
          // Fallback to localStorage
          const existingPayments = JSON.parse(localStorage.getItem('patientPaymentRecords') || '[]');
          const newPaymentRecord = {
            id: `${newPatientId}-${Date.now()}`,
            patientId: newPatientId,
            date: new Date().toISOString().split('T')[0],
            amount: payAmount,
            comment: `Payment record for ${formData.name}`,
            paymentMode: formData.paymentType || 'Cash',
            balanceRemaining: totalAmount - payAmount,
            createdBy: 'System',
            createdAt: new Date().toISOString()
          };
          existingPayments.push(newPaymentRecord);
          localStorage.setItem('patientPaymentRecords', JSON.stringify(existingPayments));
        }
      }
      
      toast({
        title: "Patient Added Successfully!",
        description: `Patient ${formData.name} has been registered.`,
      });
      
      setTimeout(() => {
        navigate('/patients/list');
      }, 1500);
    } catch (error) {
      console.error('❌ Error adding patient:', error);
      console.error('❌ Error details:', error?.message || 'Unknown error');
      console.error('❌ Full error object:', JSON.stringify(error, null, 2));
      toast({
        title: "Error",
        description: `Failed to add patient: ${error?.message || 'Please try again.'}`,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const FileUploadField = ({ 
    label, 
    field, 
    accept = ".pdf,.jpg,.jpeg,.png" 
  }: { 
    label: string; 
    field: keyof typeof documents; 
    accept?: string;
  }) => (
    <div className="space-y-2">
      <Label className="text-sm font-medium">{label}</Label>
      <div className="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-3">
        <Input
          type="file"
          accept={accept}
          onChange={(e) => handleFileUpload(field, e.target.files?.[0] || null)}
          className="hidden"
          id={field}
        />
        <Label
          htmlFor={field}
          className="flex items-center space-x-2 cursor-pointer bg-muted hover:bg-muted/80 px-4 py-3 rounded-lg border border-input transition-colors w-full sm:w-auto min-h-[2.75rem] justify-center sm:justify-start"
        >
          <Upload className="w-4 h-4 flex-shrink-0" />
          <span className="text-sm text-center sm:text-left">
            {documents[field] 
              ? `${documents[field]!.name.length > 25 ? documents[field]!.name.substring(0, 25) + '...' : documents[field]!.name} (${(documents[field]!.size / (1024 * 1024)).toFixed(2)}MB)`
              : 'Choose file (Max 5MB)'
            }
          </span>
        </Label>
        {documents[field] && (
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => handleFileUpload(field, null)}
            className="w-full sm:w-auto h-11"
          >
            Remove
          </Button>
        )}
      </div>
      <p className="text-xs text-muted-foreground">
        Accepted formats: {accept}. Maximum file size: 5MB
      </p>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 pl-1 pr-3 sm:pl-2 sm:pr-4 lg:pl-3 lg:pr-6 py-4 sm:py-6">
      <div className="max-w-6xl mx-auto">
        {/* Modern Floating Header */}
        <div className="bg-white/95 backdrop-blur-lg border border-white/30 rounded-2xl sm:rounded-3xl p-4 sm:p-6 lg:p-8 shadow-2xl mb-4 sm:mb-6 lg:mb-8 relative overflow-hidden">
          {/* Background Pattern */}
          <div className="absolute inset-0 bg-gradient-to-r from-blue-600/5 via-indigo-600/5 to-purple-600/5"></div>
          <div className="absolute top-0 right-0 w-24 h-24 sm:w-32 sm:h-32 bg-gradient-to-br from-blue-400/10 to-purple-400/10 rounded-full -mr-12 sm:-mr-16 -mt-12 sm:-mt-16"></div>
          
          <div className="relative flex flex-col sm:flex-row items-start sm:items-center space-y-3 sm:space-y-0 sm:space-x-6">
            <div className="p-3 sm:p-4 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl sm:rounded-2xl shadow-lg">
              <UserPlus className="w-6 h-6 sm:w-8 sm:h-8 text-white" />
            </div>
            <div className="flex-1 min-w-0">
              <h1 className="text-xl sm:text-2xl lg:text-4xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
                Add New Patient
              </h1>
            </div>
            <div className="hidden lg:flex items-center space-x-2 bg-blue-50 px-4 py-2 rounded-full">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-sm text-gray-600 font-medium">Ready to submit</span>
            </div>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4 sm:space-y-6">
          {/* Patient Information */}
          <Card className="bg-white/90 backdrop-blur-sm border border-white/20 rounded-xl sm:rounded-2xl shadow-lg">
            <CardHeader className="border-b border-gray-100 p-4 sm:p-6">
              <CardTitle className="flex items-center text-lg sm:text-xl">
                <Heart className="w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3 text-blue-600" />
                Patient Information
            </CardTitle>
            {/* <CardDescription>Basic patient details and contact information</CardDescription> */}
          </CardHeader>
          <CardContent className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 p-4 sm:p-6">
            <div className="space-y-2">
              <Label htmlFor="name" className="text-sm font-medium">Full Name *</Label>
              <Input
                id="name"
                placeholder="Enter patient's full name"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                required
                className="h-11"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="age" className="text-sm font-medium">Age *</Label>
              <Input
                id="age"
                type="number"
                placeholder="Enter age"
                value={formData.age}
                onChange={(e) => handleInputChange('age', e.target.value)}
                required
                min="0"
                max="150"
                className="h-11"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="gender" className="text-sm font-medium">Gender *</Label>
              <Select value={formData.gender} onValueChange={(value) => handleInputChange('gender', value)} required>
                <SelectTrigger className="h-11">
                  <SelectValue placeholder="Select gender" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Male">Male</SelectItem>
                  <SelectItem value="Female">Female</SelectItem>
                  <SelectItem value="Other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="phone" className="text-sm font-medium">Phone Number *</Label>
              <div className="relative">
                <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                <Input
                  id="phone"
                  placeholder="Enter phone number"
                  value={formData.phone}
                  onChange={(e) => handleInputChange('phone', e.target.value)}
                  required
                  className="pl-10 h-11"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="email" className="text-sm font-medium">Email Address</Label>
              <div className="relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter email address"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  className="pl-10 h-11"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="emergencyContact" className="text-sm font-medium">Emergency Contact *</Label>
              <Input
                id="emergencyContact"
                placeholder="Emergency contact number"
                value={formData.emergencyContact}
                onChange={(e) => handleInputChange('emergencyContact', e.target.value)}
                required
                className="h-11"
              />
            </div>

            <div className="space-y-2 lg:col-span-2">
              <Label htmlFor="address" className="text-sm font-medium">Address *</Label>
              <div className="relative">
                <MapPin className="absolute left-3 top-3 w-4 h-4 text-muted-foreground" />
                <Textarea
                  id="address"
                  placeholder="Enter complete address"
                  value={formData.address}
                  onChange={(e) => handleInputChange('address', e.target.value)}
                  required
                  className="pl-10 min-h-[2.75rem]"
                  rows={3}
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label className="text-sm font-medium">Admission Date *</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal h-11",
                      !admissionDate && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {admissionDate ? format(admissionDate, "dd-MM-yyyy") : "Pick admission date"}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={admissionDate}
                    onSelect={setAdmissionDate}
                    initialFocus
                    className="pointer-events-auto"
                  />
                </PopoverContent>
              </Popover>
            </div>

            <div className="space-y-2">
              <Label htmlFor="status" className="text-sm font-medium">Status</Label>
              <Select value={formData.status} onValueChange={(value) => handleInputChange('status', value)}>
                <SelectTrigger className="h-11">
                  <SelectValue placeholder="Select status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Active">Active</SelectItem>
                  <SelectItem value="Inactive">Inactive</SelectItem>
                  <SelectItem value="Critical">Critical</SelectItem>
                  <SelectItem value="Discharged">Discharged</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="fatherName" className="text-sm font-medium">Father Name</Label>
              <Input
                id="fatherName"
                placeholder="Enter father's name"
                value={formData.fatherName}
                onChange={(e) => handleInputChange('fatherName', e.target.value)}
                className="h-11"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="motherName" className="text-sm font-medium">Mother Name</Label>
              <Input
                id="motherName"
                placeholder="Enter mother's name"
                value={formData.motherName}
                onChange={(e) => handleInputChange('motherName', e.target.value)}
                className="h-11"
              />
            </div>

            <div className="space-y-2">
              <Label className="text-sm font-medium">Date of Birth</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal h-11",
                      !dateOfBirth && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {dateOfBirth ? format(dateOfBirth, "dd-MM-yyyy") : "Pick date of birth"}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={dateOfBirth}
                    onSelect={setDateOfBirth}
                    initialFocus
                    className="pointer-events-auto"
                  />
                </PopoverContent>
              </Popover>
            </div>

            <div className="space-y-2">
              <Label htmlFor="marriageStatus" className="text-sm font-medium">Marriage Status</Label>
              <Select value={formData.marriageStatus} onValueChange={(value) => handleInputChange('marriageStatus', value)}>
                <SelectTrigger className="h-11">
                  <SelectValue placeholder="Select marriage status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Single">Single</SelectItem>
                  <SelectItem value="Married">Married</SelectItem>
                  <SelectItem value="Divorced">Divorced</SelectItem>
                  <SelectItem value="Widowed">Widowed</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="employeeStatus" className="text-sm font-medium">Employee Status</Label>
              <Select value={formData.employeeStatus} onValueChange={(value) => handleInputChange('employeeStatus', value)}>
                <SelectTrigger className="h-11">
                  <SelectValue placeholder="Select employee status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Employed">Employed</SelectItem>
                  <SelectItem value="Unemployed">Unemployed</SelectItem>
                  <SelectItem value="Self-Employed">Self-Employed</SelectItem>
                  <SelectItem value="Retired">Retired</SelectItem>
                  <SelectItem value="Student">Student</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="photo" className="text-sm font-medium">Patient Photo</Label>
              <div className="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-3">
                <Input
                  type="file"
                  accept="image/*"
                  onChange={(e) => handlePhotoUpload(e.target.files?.[0] || null)}
                  className="hidden"
                  id="photo"
                />
                <Label
                  htmlFor="photo"
                  className="flex items-center space-x-2 cursor-pointer bg-muted hover:bg-muted/80 px-4 py-3 rounded-lg border border-input transition-colors w-full sm:w-auto min-h-[2.75rem] justify-center sm:justify-start"
                >
                  <Upload className="w-4 h-4 flex-shrink-0" />
                  <span className="text-sm text-center sm:text-left">
                    {photo 
                      ? `${photo.name.length > 20 ? photo.name.substring(0, 20) + '...' : photo.name} (${(photo.size / (1024 * 1024)).toFixed(2)}MB)`
                      : 'Choose photo (Max 5MB)'
                    }
                  </span>
                </Label>
                {photo && (
                  <div className="flex space-x-2 w-full sm:w-auto">
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => setPhoto(null)}
                      className="flex-1 sm:flex-none h-11"
                    >
                      Remove
                    </Button>
                    <Button
                      type="button"
                      variant="secondary"
                      size="sm"
                      onClick={testUpload}
                      className="flex-1 sm:flex-none h-11"
                    >
                      Test Upload
                    </Button>
                  </div>
                )}
              </div>
              <p className="text-xs text-muted-foreground">
                Accepted formats: JPG, JPEG, PNG, GIF. Maximum file size: 5MB
              </p>
            </div>

            <div className="space-y-2 lg:col-span-2">
              <Label htmlFor="medicalHistory" className="text-sm font-medium">Medical History</Label>
              <Textarea
                id="medicalHistory"
                placeholder="Enter patient's medical history and conditions"
                value={formData.medicalHistory}
                onChange={(e) => handleInputChange('medicalHistory', e.target.value)}
                rows={3}
                className="min-h-[5rem]"
              />
            </div>
          </CardContent>
        </Card>

        {/* Attender Information */}
        <Card className="bg-white/90 backdrop-blur-sm border border-white/20 rounded-xl sm:rounded-2xl shadow-lg">
          <CardHeader className="border-b border-gray-100 p-4 sm:p-6">
            <CardTitle className="flex items-center text-lg sm:text-xl">
              <UserCheck className="w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3 text-blue-600" />
              Attender Information
            </CardTitle>
            {/* <CardDescription>Details of the person accompanying the patient</CardDescription> */}
          </CardHeader>
          <CardContent className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 p-4 sm:p-6">
            <div className="space-y-2">
              <Label htmlFor="attenderName" className="text-sm font-medium">Attender Name</Label>
              <Input
                id="attenderName"
                placeholder="Enter attender's name"
                value={formData.attenderName}
                onChange={(e) => handleInputChange('attenderName', e.target.value)}
                className="h-11"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="attenderPhone" className="text-sm font-medium">Attender Phone</Label>
              <Input
                id="attenderPhone"
                placeholder="Enter attender's phone"
                value={formData.attenderPhone}
                onChange={(e) => handleInputChange('attenderPhone', e.target.value)}
                className="h-11"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="attenderRelationship" className="text-sm font-medium">Attender Relationship</Label>
              <Select value={formData.attenderRelationship} onValueChange={(value) => handleInputChange('attenderRelationship', value)}>
                <SelectTrigger className="h-11">
                  <SelectValue placeholder="Select relationship" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Father">Father</SelectItem>
                  <SelectItem value="Mother">Mother</SelectItem>
                  <SelectItem value="Spouse">Spouse</SelectItem>
                  <SelectItem value="Child">Child</SelectItem>
                  <SelectItem value="Sibling">Sibling</SelectItem>
                  <SelectItem value="Guardian">Guardian</SelectItem>
                  <SelectItem value="Friend">Friend</SelectItem>
                  <SelectItem value="Other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Payment Information */}
        <Card className="bg-white/90 backdrop-blur-sm border border-white/20 rounded-xl sm:rounded-2xl shadow-lg">
          <CardHeader className="border-b border-gray-100 p-4 sm:p-6">
            <CardTitle className="flex items-center text-lg sm:text-xl">
              <Mail className="w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3 text-blue-600" />
              Payment Information
            </CardTitle>
            {/* <CardDescription>Billing and payment details</CardDescription> */}
          </CardHeader>
          <CardContent className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 p-4 sm:p-6">
            <div className="space-y-2">
              <Label htmlFor="fees" className="text-sm font-medium">Fees</Label>
              <Input
                id="fees"
                type="number"
                placeholder="Enter fees amount"
                value={formData.fees}
                onChange={(e) => handleInputChange('fees', e.target.value)}
                min="0"
                step="0.01"
                className="h-11"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="bloodTest" className="text-sm font-medium">Blood Test</Label>
              <Input
                id="bloodTest"
                type="number"
                placeholder="Enter blood test cost"
                value={formData.bloodTest}
                onChange={(e) => handleInputChange('bloodTest', e.target.value)}
                min="0"
                step="0.01"
                className="h-11"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="pickupCharge" className="text-sm font-medium">Pickup Charge</Label>
              <Input
                id="pickupCharge"
                type="number"
                placeholder="Enter pickup charge"
                value={formData.pickupCharge}
                onChange={(e) => handleInputChange('pickupCharge', e.target.value)}
                min="0"
                step="0.01"
                className="h-11"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="otherFees" className="text-sm font-medium text-blue-600">
                Other Fees (Auto-calculated)
              </Label>
              <Input
                id="otherFees"
                type="number"
                placeholder="Blood Test + Pickup Charge"
                value={(() => {
                  const bloodTest = parseFloat(formData.bloodTest) || 0;
                  const pickupCharge = parseFloat(formData.pickupCharge) || 0;
                  return (bloodTest + pickupCharge).toString();
                })()}
                readOnly
                className="bg-blue-50 border-blue-200 text-blue-800 font-medium h-11"
                title="This field is automatically calculated as Blood Test + Pickup Charge"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="totalAmount" className="text-sm font-medium">Total Amount</Label>
              <Input
                id="totalAmount"
                type="number"
                placeholder="Total amount"
                value={formData.totalAmount}
                readOnly
                className="bg-muted h-11"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="payAmount" className="text-sm font-medium">Pay Amount</Label>
              <Input
                id="payAmount"
                type="number"
                placeholder="Enter pay amount"
                value={formData.payAmount}
                onChange={(e) => handleInputChange('payAmount', e.target.value)}
                min="0"
                step="0.01"
                className="h-11"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="balance" className="text-sm font-medium">Balance</Label>
              <Input
                id="balance"
                type="number"
                placeholder="Balance amount"
                value={formData.balance}
                readOnly
                className="bg-muted h-11"
              />
            </div>

            <div className="space-y-2 sm:col-span-2 lg:col-span-1">
              <Label htmlFor="paymentType" className="text-sm font-medium">Payment Type</Label>
              <Select value={formData.paymentType} onValueChange={(value) => handleInputChange('paymentType', value)}>
                <SelectTrigger className="h-11">
                  <SelectValue placeholder="Select payment type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Cash">Cash</SelectItem>
                  <SelectItem value="Card">Card</SelectItem>
                  <SelectItem value="UPI">UPI</SelectItem>
                  <SelectItem value="Bank Transfer">Bank Transfer</SelectItem>
                  <SelectItem value="Insurance">Insurance</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Document Upload */}
        <Card className="bg-white/90 backdrop-blur-sm border border-white/20 rounded-xl sm:rounded-2xl shadow-lg">
          <CardHeader className="border-b border-gray-100 p-4 sm:p-6">
            <CardTitle className="flex items-center text-lg sm:text-xl">
              <FileText className="w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3 text-blue-600" />
              Document Upload
            </CardTitle>
            {/* <CardTitle className="flex items-center">
              <FileText className="w-5 h-5 mr-2 text-primary" />
              Document Upload
            </CardTitle> */}
            {/* <CardDescription>Upload identification documents for patient and attender</CardDescription> */}
          </CardHeader>
          <CardContent className="grid grid-cols-1 lg:grid-cols-2 gap-6 sm:gap-8 p-4 sm:p-6">
            <div className="space-y-4">
              <h4 className="font-medium text-base">Patient Documents</h4>
              <FileUploadField label="Patient Aadhar Card" field="patientAadhar" />
              <FileUploadField label="Patient PAN Card" field="patientPan" />
            </div>
            
            <div className="space-y-4">
              <h4 className="font-medium text-base">Attender Documents</h4>
              <FileUploadField label="Attender Aadhar Card" field="attenderAadhar" />
              <FileUploadField label="Attender PAN Card" field="attenderPan" />
            </div>
          </CardContent>
        </Card>

        {/* Submit Buttons */}
        <div className="flex flex-col sm:flex-row justify-end space-y-3 sm:space-y-0 sm:space-x-4 pt-4 sm:pt-6">
          <Button
            type="button"
            variant="outline"
            onClick={() => navigate('/patients/list')}
            className="header-action-btn header-action-btn--clear h-11 px-6 w-full sm:w-auto order-2 sm:order-1"
          >
            Cancel
          </Button>
          <Button
            type="submit"
            disabled={loading}
            className="header-action-btn header-action-btn--primary h-11 px-8 w-full sm:w-auto order-1 sm:order-2"
          >
            {loading ? 'Adding Patient...' : 'Add Patient'}
          </Button>
        </div>
      </form>
      </div>
    </div>
  );
};

export default AddPatient;