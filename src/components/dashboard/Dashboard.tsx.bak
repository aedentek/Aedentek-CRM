import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { cn } from '@/lib/utils';
import { 
  Users, 
  Stethoscope, 
  Calendar, 
  Pill,
  TrendingUp,
  TrendingDown,
  Activity,
  Clock,
  AlertCircle,
  CheckCircle,
  Heart,
  UserPlus,
  ClipboardCheck,
  Package,
  CalendarDays,
} from 'lucide-react';

interface DashboardProps {
  user: {
    id: string;
    name: string;
    role: string;
  };
}

interface RecentActivity {
  id: string;
  type: 'patient' | 'medicine' | 'appointment' | 'staff';
  text: string;
  time: string;
}

interface Reminder {
  id: number;
  leadName: string;
  reminderDate: string;
  type: string;
  status: string;
}

const months = [
  'January', 'February', 'March', 'April', 'May', 'June',
  'July', 'August', 'September', 'October', 'November', 'December'
];

const remindersPerPage = 5;
const currentYear = new Date().getFullYear();
  CalendarDays,
  Package
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface DashboardProps {
  user: { name: string; role: string };
}

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { 
  Users, 
  Stethoscope, 
  Calendar, 
  Pill,
  TrendingUp,
  TrendingDown,
  Activity,
  Clock,
  AlertCircle,
  Heart,
  UserPlus,
  ClipboardCheck,
  CalendarDays,
  Package
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface DashboardProps {
  user: { name: string; role: string };
}

const Dashboard = ({ user }: DashboardProps): JSX.Element => {
  const currentYear = new Date().getFullYear();
  const remindersPerPage = 5;

  // Date Filter State
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());
  const [selectedYear, setSelectedYear] = useState(currentYear);
  const [showMonthYearDialog, setShowMonthYearDialog] = useState(false);
  const [filterMonth, setFilterMonth] = useState<number | null>(new Date().getMonth());
  const [filterYear, setFilterYear] = useState<number | null>(currentYear);

  // Data States
  interface Reminder {
    id: number;
    leadName: string;
    reminderDate: string;
    type: string;
    status: string;
  }

  interface Stats {
    totalPatients: number;
    activeDoctors: number;
    totalStaff: number;
    totalMedicines: number;
    pendingApprovals: number;
    totalRevenue: number;
    inStockProducts: number;
    lowStockProducts: number;
    outOfStockProducts: number;
  }

  const [stats, setStats] = useState<Stats>({
    totalPatients: 0,
    activeDoctors: 0,
    totalStaff: 0,
    totalMedicines: 0,
    pendingApprovals: 0,
    totalRevenue: 0,
    inStockProducts: 0,
    lowStockProducts: 0,
    outOfStockProducts: 0
  });

  const [reminders, setReminders] = useState<Reminder[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [recentActivities, setRecentActivities] = useState<any[]>([]);

  interface Appointment {
    id: number;
    time: string;
    patient: string;
    doctor: string;
    type: string;
    status: 'confirmed' | 'pending' | 'cancelled';
  }

  const [todaySchedule, setTodaySchedule] = useState<Appointment[]>([
    { id: 1, time: '09:00 AM', patient: 'John Doe', doctor: 'Dr. Smith', type: 'Consultation', status: 'confirmed' },
    { id: 2, time: '10:30 AM', patient: 'Jane Wilson', doctor: 'Dr. Johnson', type: 'Follow-up', status: 'pending' },
    { id: 3, time: '02:00 PM', patient: 'Mike Brown', doctor: 'Dr. Davis', type: 'Surgery', status: 'confirmed' },
    { id: 4, time: '03:30 PM', patient: 'Sarah Lee', doctor: 'Dr. Smith', type: 'Consultation', status: 'cancelled' }
  ]);

  // Helper function to format time differences
  const formatTimeAgo = (date: string | Date) => {
    const now = new Date();
    const activityDate = new Date(date);
    const diffInMinutes = Math.floor((now.getTime() - activityDate.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'just now';
    if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;
    if (diffInMinutes < 120) return '1 hour ago';
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} hours ago`;
    return `${Math.floor(diffInMinutes / 1440)} days ago`;
  };

  // Load statistics effect
  useEffect(() => {
    const loadStats = async () => {
      try {
        const { DatabaseService } = await import('@/services/databaseService');
        const [patients, doctors, staff, medicines] = await Promise.all([
          DatabaseService.getAllPatients(),
          DatabaseService.getAllDoctors(),
          DatabaseService.getAllStaff(),
          DatabaseService.getAllGeneralProducts()
        ]);
        
        const activeDoctorCount = doctors.filter(doctor => doctor.status === 'Active').length;
        const activeStaffCount = staff.filter(s => s.status === 'Active').length;
        
        const medicineStats = medicines.reduce((acc: any, medicine: any) => {
          const stockLevel = medicine.quantity || 0;
          const minStock = medicine.minStock || 10;
          
          if (stockLevel <= 0) acc.outOfStockProducts++;
          else if (stockLevel <= minStock) acc.lowStockProducts++;
          else acc.inStockProducts++;
          
          return acc;
        }, { inStockProducts: 0, lowStockProducts: 0, outOfStockProducts: 0 });

        setStats({
          totalPatients: patients.length,
          activeDoctors: activeDoctorCount,
          totalStaff: activeStaffCount,
          totalMedicines: medicines.length,
          pendingApprovals: 8,
          totalRevenue: 85420,
          ...medicineStats
        });
      } catch (error) {
        console.error('Failed to load statistics:', error);
      }
    };

    loadStats();
  }, [filterMonth, filterYear]);

  // Fetch recent activities effect
  useEffect(() => {
    const fetchRecentActivities = async () => {
      try {
        const { DatabaseService } = await import('@/services/databaseService');
        const [patients, medicines, appointments, staff] = await Promise.all([
          DatabaseService.getAllPatients(),
          DatabaseService.getAllMedicineProducts(),
          DatabaseService.getAllPatientAttendance(),
          DatabaseService.getAllStaff()
        ]);

        const activities = [
          ...patients.slice(-5).map(p => ({
            id: `patient-${p.id}`,
            text: `New patient registered: ${p.name}`,
            time: new Date(p.createdAt).getTime(),
            type: 'patient'
          })),
          ...medicines.slice(-5).map(m => ({
            id: `medicine-${m.id}`,
            text: `Medicine stock updated: ${m.name}`,
            time: new Date(m.updatedAt).getTime(),
            type: 'medicine'
          })),
          ...appointments.slice(-5).map(a => ({
            id: `appointment-${a.id}`,
            text: `Appointment scheduled: ${a.doctorName || 'Doctor'}`,
            time: new Date(a.createdAt).getTime(),
            type: 'appointment'
          })),
          ...staff.slice(-5).map(s => ({
            id: `staff-${s.id}`,
            text: `Staff member updated: ${s.name}`,
            time: new Date(s.updatedAt).getTime(),
            type: 'staff'
          }))
        ].sort((a, b) => b.time - a.time)
         .slice(0, 4)
         .map(activity => ({
           ...activity,
           time: formatTimeAgo(new Date(activity.time))
         }));

        setRecentActivities(activities);
      } catch (error) {
        console.error('Failed to fetch recent activities:', error);
      }
    };

    fetchRecentActivities();
    const interval = setInterval(fetchRecentActivities, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  // Fetch reminders effect
  useEffect(() => {
    const fetchReminders = async () => {
      try {
        const { DatabaseService } = await import('@/services/databaseService');
        const startIndex = (currentPage - 1) * remindersPerPage;
        const leads = await DatabaseService.getAllLeads();
        
        const leadsWithReminders = leads
          .filter(lead => lead.reminderDate)
          .sort((a, b) => new Date(a.reminderDate).getTime() - new Date(b.reminderDate).getTime())
          .slice(startIndex, startIndex + remindersPerPage)
          .map(lead => ({
            id: lead.id,
            leadName: lead.name,
            reminderDate: lead.reminderDate,
            status: lead.reminderStatus || 'Pending',
            type: lead.reminderType || 'Follow-up'
          }));

        setReminders(leadsWithReminders);
      } catch (error) {
        console.error('Failed to fetch reminders:', error);
      }
    };

    fetchReminders();
  }, [currentPage, remindersPerPage]);

  const getStatusBadge = (status: string) => {
    switch (status.toLowerCase()) {
      case 'confirmed':
        return <Badge className="bg-gradient-to-r from-green-100 to-green-200 text-green-800 dark:from-green-900 dark:to-green-800 dark:text-green-200 font-medium px-3 py-1">Confirmed</Badge>;
      case 'pending':
        return <Badge className="bg-gradient-to-r from-yellow-100 to-yellow-200 text-yellow-800 dark:from-yellow-900 dark:to-yellow-800 dark:text-yellow-200 font-medium px-3 py-1">Pending</Badge>;
      case 'cancelled':
        return <Badge className="bg-gradient-to-r from-red-100 to-red-200 text-red-800 dark:from-red-900 dark:to-red-800 dark:text-red-200 font-medium px-3 py-1">Cancelled</Badge>;
      default:
        return <Badge className="bg-gradient-to-r from-gray-100 to-gray-200 text-gray-800 dark:from-gray-900 dark:to-gray-800 dark:text-gray-200 font-medium px-3 py-1">{status}</Badge>;
    }
  };

  const onMonthYearChange = () => {
    setFilterMonth(selectedMonth);
    setFilterYear(selectedYear);
    setShowMonthYearDialog(false);
  };

  // Month names for the select dropdown
  const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  const [stats, setStats] = useState({
    totalPatients: 0,
    activeDoctors: 0,
    totalStaff: 0,
    totalMedicines: 0,
    pendingApprovals: 0,
    totalRevenue: 0,
    inStockProducts: 0,
    lowStockProducts: 0,
    outOfStockProducts: 0
  });

  const [recentActivities, setRecentActivities] = useState([]);

  // Helper function to format time differences
  const formatTimeAgo = (date: string | Date) => {
    const now = new Date();
    const activityDate = new Date(date);
    const diffInMinutes = Math.floor((now.getTime() - activityDate.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'just now';
    if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;
    if (diffInMinutes < 120) return '1 hour ago';
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} hours ago`;
    return `${Math.floor(diffInMinutes / 1440)} days ago`;
  };

  // Fetch recent activities
  useEffect(() => {
    const fetchRecentActivities = async () => {
      try {
        const { DatabaseService } = await import('@/services/databaseService');
        
        // Get various activities
        const [patients, medicines, appointments, staff] = await Promise.all([
          DatabaseService.getAllPatients(),
          DatabaseService.getAllMedicineProducts(),
          DatabaseService.getAllPatientAttendance(),
          DatabaseService.getAllStaff()
        ]);

        // Process recent activities
        const activities = [];
        
        // Add patient activities
        patients.slice(-5).forEach(p => {
          if (p.createdAt) {
            activities.push({
              id: `patient-${p.id}`,
              text: `New patient registered: ${p.name}`,
              time: new Date(p.createdAt).getTime(),
              displayTime: formatTimeAgo(p.createdAt),
              type: 'patient'
            });
          }
        });

        // Add medicine activities
        medicines.slice(-5).forEach(m => {
          if (m.updatedAt) {
            activities.push({
              id: `medicine-${m.id}`,
              text: `Medicine stock updated: ${m.name}`,
              time: new Date(m.updatedAt).getTime(),
              displayTime: formatTimeAgo(m.updatedAt),
              type: 'medicine'
            });
          }
        });

        // Add appointment activities
        appointments.slice(-5).forEach(a => {
          if (a.createdAt) {
            activities.push({
              id: `appointment-${a.id}`,
              text: `Appointment scheduled: ${a.doctorName || 'Doctor'}`,
              time: new Date(a.createdAt).getTime(),
              displayTime: formatTimeAgo(a.createdAt),
              type: 'appointment'
            });
          }
        });

        // Add staff activities
        staff.slice(-5).forEach(s => {
          if (s.updatedAt) {
            activities.push({
              id: `staff-${s.id}`,
              text: `Staff member updated: ${s.name}`,
              time: new Date(s.updatedAt).getTime(),
              displayTime: formatTimeAgo(s.updatedAt),
              type: 'staff'
            });
          }
        });

        // Sort by time and take most recent 4
        const sortedActivities = activities
          .sort((a, b) => b.time - a.time)
          .slice(0, 4)
          .map(activity => ({
            ...activity,
            time: activity.displayTime // Replace timestamp with formatted time for display
          }));

        setRecentActivities(sortedActivities);
      } catch (error) {
        console.error('Failed to fetch recent activities:', error);
        setRecentActivities([]);
      }
    };

    fetchRecentActivities();
    // Refresh activities every 5 minutes
    const interval = setInterval(fetchRecentActivities, 5 * 60 * 1000);
    
    return () => clearInterval(interval);
  }, []);

  // Reminders state for Leads List
  const [reminders, setReminders] = useState<Reminder[]>([]);
  const [currentPage, setCurrentPage] = useState(1);

  // Fetch reminders from database
  useEffect(() => {
    const fetchReminders = async () => {
      try {
        const { DatabaseService } = await import('@/services/databaseService');
        const startIndex = (currentPage - 1) * remindersPerPage;
        
        // Fetch leads with reminders
        const leads = await DatabaseService.getAllLeads();
        
        // Filter leads with reminders and paginate
        const leadsWithReminders = leads
          .filter(lead => lead.reminderDate) // Only get leads that have reminder dates
          .sort((a, b) => new Date(a.reminderDate).getTime() - new Date(b.reminderDate).getTime())
          .slice(startIndex, startIndex + remindersPerPage);
        
        // Transform leads data into reminder format
        const formattedReminders = leadsWithReminders.map(lead => ({
          id: lead.id,
          leadName: lead.name,
          reminderDate: lead.reminderDate,
          status: lead.reminderStatus || 'Pending',
          type: lead.reminderType || 'Follow-up'
        }));

        setReminders(formattedReminders);
      } catch (error) {
        console.error('Failed to fetch reminders:', error);
        setReminders([]);
      }
    };

    fetchReminders();
  }, [currentPage]);

  const [todaySchedule, setTodaySchedule] = useState([
    { id: 1, time: '09:00 AM', patient: 'John Doe', doctor: 'Dr. Smith', type: 'Consultation', status: 'confirmed' },
    { id: 2, time: '10:30 AM', patient: 'Jane Wilson', doctor: 'Dr. Johnson', type: 'Follow-up', status: 'pending' },
    { id: 3, time: '02:00 PM', patient: 'Mike Brown', doctor: 'Dr. Davis', type: 'Surgery', status: 'confirmed' },
    { id: 4, time: '03:30 PM', patient: 'Sarah Lee', doctor: 'Dr. Smith', type: 'Consultation', status: 'cancelled' }
  ]);

  useEffect(() => {
    // Load statistics including real patient, doctor and staff counts
    const loadStats = async () => {
      try {
        const { DatabaseService } = await import('@/services/databaseService');
        const [patients, doctors, staff, medicines] = await Promise.all([
          DatabaseService.getAllPatients(),
          DatabaseService.getAllDoctors(),
          DatabaseService.getAllStaff(),
          DatabaseService.getAllGeneralProducts()
        ]);
        
        // Filter active doctors
        const activeDoctorCount = doctors.filter(doctor => doctor.status === 'Active').length;
        
        // Filter active staff
        const activeStaffCount = staff.filter(s => s.status === 'Active').length;
        
        // Calculate medicine stock statistics
        const medicineStats = medicines.reduce((acc: any, medicine: any) => {
          const stockLevel = medicine.quantity || 0;
          const minStock = medicine.minStock || 10; // Default minimum stock level
          
          if (stockLevel <= 0) {
            acc.outOfStockProducts++;
          } else if (stockLevel <= minStock) {
            acc.lowStockProducts++;
          } else {
            acc.inStockProducts++;
          }
          return acc;
        }, { inStockProducts: 0, lowStockProducts: 0, outOfStockProducts: 0 });

        setStats({
          totalPatients: patients.length,
          activeDoctors: activeDoctorCount,
          totalStaff: activeStaffCount,
          totalMedicines: medicines.length,
          pendingApprovals: 8,
          totalRevenue: 85420,
          ...medicineStats
        });
      } catch (error) {
        console.error('Failed to load statistics:', error);
        // Keep previous values or set to 0 in case of error
        setStats(prev => ({
          ...prev,
          totalPatients: prev.totalPatients || 0,
          activeDoctors: prev.activeDoctors || 0
        }));
      }
    };

    loadStats();
  }, [filterMonth, filterYear]);

  const statCards = [
    {
      title: 'Total Patients',
      value: stats.totalPatients.toLocaleString(),
      description: '+12% from last month',
      icon: Users,
      trend: 'up',
      color: 'text-blue-600'
    },
    {
      title: 'Active Doctors',
      value: stats.activeDoctors.toString(),
      description: '2 new this week',
      icon: Stethoscope,
      trend: 'up',
      color: 'text-green-600'
    },
    {
      title: 'Total Staff',
      value: stats.totalStaff.toString(),
      description: 'Active staff members',
      icon: Users,
      trend: 'neutral',
      color: 'text-orange-600'
    },
    {
      title: 'Total Medicines',
      value: stats.totalMedicines.toString(),
      description: '15 low stock alerts',
      icon: Pill,
      trend: 'down',
      color: 'text-purple-600'
    },
    {
      title: 'Pending Approvals',
      value: stats.pendingApprovals.toString(),
      description: 'Requires attention',
      icon: AlertCircle,
      trend: 'neutral',
      color: 'text-red-600'
    },
    {
      title: 'Revenue (Monthly)',
      value: `₹${stats.totalRevenue.toLocaleString()}`,
      description: '+8% from last month',
      icon: TrendingUp,
      trend: 'up',
      color: 'text-green-600'
    }
  ];

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'confirmed':
        return <Badge className="bg-green-100 text-green-800">Confirmed</Badge>;
      case 'pending':
        return <Badge className="bg-yellow-100 text-yellow-800">Pending</Badge>;
      case 'cancelled':
        return <Badge className="bg-red-100 text-red-800">Cancelled</Badge>;
      default:
        return <Badge className="bg-gray-100 text-gray-800">{status.charAt(0).toUpperCase() + status.slice(1)}</Badge>;
    }
  };

  const onFilterChange = () => {
    setFilterMonth(selectedMonth);
    setFilterYear(selectedYear);
    setShowMonthYearDialog(false);
  };

  return (
    <div className="min-h-screen bg-[#f8f9fa] p-4">
      {/* Top Bar */}
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center gap-4">
          <div className="relative">
            <input 
              type="text" 
              placeholder="Search..."
              className="pl-10 pr-4 py-2 rounded-lg border border-gray-200 bg-white w-[300px]"
            />
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
              <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M7.33333 12.6667C10.2789 12.6667 12.6667 10.2789 12.6667 7.33333C12.6667 4.38781 10.2789 2 7.33333 2C4.38781 2 2 4.38781 2 7.33333C2 10.2789 4.38781 12.6667 7.33333 12.6667Z" stroke="#94A3B8" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M14 14L11 11" stroke="#94A3B8" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </div>
          </div>
        </div>
        <div className="flex items-center gap-4">
          <Button
            variant="outline"
            className="flex items-center gap-2 bg-white"
            onClick={() => setShowMonthYearDialog(true)}
          >
            <CalendarDays className="h-4 w-4" />
            {months[selectedMonth]} {selectedYear}
          </Button>
          <Button className="bg-purple-600 hover:bg-purple-700 text-white">
            Generate Report
          </Button>
        </div>
      </div>

      {/* Month/Year Selection Dialog */}
      <Dialog open={showMonthYearDialog} onOpenChange={setShowMonthYearDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Select Month and Year</DialogTitle>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Select
                value={selectedMonth.toString()}
                onValueChange={(value) => setSelectedMonth(parseInt(value))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select month" />
                </SelectTrigger>
                <SelectContent>
                  {months.map((month, index) => (
                    <SelectItem key={index} value={index.toString()}>
                      {month}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="grid gap-2">
              <Select
                value={selectedYear.toString()}
                onValueChange={(value) => setSelectedYear(parseInt(value))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select year" />
                </SelectTrigger>
                <SelectContent>
                  {Array.from({ length: 5 }, (_, i) => currentYear - 2 + i).map((year) => (
                    <SelectItem key={year} value={year.toString()}>
                      {year}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          <DialogFooter>
            <Button
              onClick={() => {
                setFilterMonth(selectedMonth);
                setFilterYear(selectedYear);
                setShowMonthYearDialog(false);
              }}
            >
              Apply Filter
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

   
      {/* Overview Stats */}
      <div className="grid grid-cols-4 gap-6 mb-6">
        <div className="bg-white rounded-xl p-4 flex items-center gap-4 shadow-sm">
          <div className="h-16 w-16 rounded-full bg-blue-100 flex items-center justify-center">
            <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-medium">
              85%
            </div>
          </div>
          <div>
            <div className="text-sm text-gray-500 mb-1">Store Status</div>
            <div className="text-xl font-semibold">Good</div>
          </div>
        </div>

        <div className="bg-white rounded-xl p-4 flex items-center gap-4 shadow-sm">
          <div className="flex-1">
            <div className="text-sm text-gray-500 mb-1">Total Sales</div>
            <div className="text-xl font-semibold">₹{stats.totalRevenue.toLocaleString()}</div>
          </div>
          <div className="h-16 w-24">
            <div className="w-full h-full bg-purple-100 rounded-lg flex items-center justify-center">
              <TrendingUp className="h-6 w-6 text-purple-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl p-4 flex items-center gap-4 shadow-sm">
          <div className="flex-1">
            <div className="text-sm text-gray-500 mb-1">Total Profit</div>
            <div className="text-xl font-semibold">₹{(stats.totalRevenue * 0.2).toLocaleString()}</div>
          </div>
          <div className="h-16 w-24">
            <div className="w-full h-full bg-green-100 rounded-lg flex items-center justify-center">
              <TrendingUp className="h-6 w-6 text-green-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl p-4 flex items-center gap-4 shadow-sm">
          <div className="flex-1">
            <div className="text-sm text-gray-500 mb-1">Total Revenue</div>
            <div className="text-xl font-semibold">₹{(stats.totalRevenue * 1.2).toLocaleString()}</div>
          </div>
          <div className="h-16 w-24">
            <div className="w-full h-full bg-pink-100 rounded-lg flex items-center justify-center">
              <TrendingUp className="h-6 w-6 text-pink-600" />
            </div>
          </div>
        </div>
      </div>

      {/* Sales Overview */}
      <div className="grid grid-cols-7 gap-6">
        <div className="col-span-4 bg-white rounded-xl p-6 shadow-sm">
          <h2 className="text-lg font-semibold mb-4">Sales Overview</h2>
          <div className="grid grid-cols-3 gap-4 mb-6">
            <div>
              <div className="text-sm text-gray-500 mb-1">Profit</div>
              <div className="text-xl font-semibold text-green-600">₹{(stats.totalRevenue * 0.2).toLocaleString()}</div>
              <div className="text-sm text-green-500">+2.5%</div>
            </div>
            <div>
              <div className="text-sm text-gray-500 mb-1">Expense</div>
              <div className="text-xl font-semibold text-red-600">₹{(stats.totalRevenue * 0.4).toLocaleString()}</div>
              <div className="text-sm text-red-500">+17%</div>
            </div>
            <div>
              <div className="text-sm text-gray-500 mb-1">Revenue</div>
              <div className="text-xl font-semibold">₹{stats.totalRevenue.toLocaleString()}</div>
              <div className="text-sm text-green-500">+23%</div>
            </div>
          </div>
          {/* Chart would go here */}
        </div>

        <div className="col-span-3 bg-white rounded-xl p-6 shadow-sm">
          <h2 className="text-lg font-semibold mb-4">Production by Unit</h2>
          {/* Bar chart would go here */}
        </div>
      </div>

      {/* Productivity and Orders */}
      <div className="grid grid-cols-7 gap-6 mt-6">
        <div className="col-span-2 bg-white rounded-xl p-6 shadow-sm">
          <h2 className="text-lg font-semibold mb-4">Plant Productivity</h2>
          <div className="flex items-center justify-between mb-4">
            <div className="text-3xl font-bold">88.11%</div>
            <div className="text-sm text-green-500">↑ 5.0%</div>
          </div>
          <div className="text-sm text-gray-500 mb-2">Target: 85.00%</div>
          {/* Area chart would go here */}
        </div>

        <div className="col-span-2 bg-white rounded-xl p-6 shadow-sm">
          <h2 className="text-lg font-semibold mb-4">Order Overview</h2>
          <div className="flex space-x-2 mb-4">
            <Button variant="outline" size="sm" className="bg-blue-100 text-blue-600 border-blue-200">Weekly</Button>
            <Button variant="outline" size="sm" className="bg-white">Monthly</Button>
          </div>
          {/* Line chart would go here */}
        </div>

        <div className="col-span-3 bg-white rounded-xl p-6 shadow-sm">
          <h2 className="text-lg font-semibold mb-4">Top Products</h2>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium">iPad</div>
                <div className="text-sm text-gray-500">Electronic Device</div>
              </div>
              <div className="font-semibold">$750</div>
            </div>
            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium">iMac</div>
                <div className="text-sm text-gray-500">Electronic Device</div>
              </div>
              <div className="font-semibold">$1599</div>
            </div>
            <div className="flex items-center justify-between">
              <div>
                <div className="font-medium">iPhone X</div>
                <div className="text-sm text-gray-500">Smartphone</div>
              </div>
              <div className="font-semibold">$999</div>
            </div>
          </div>
          <div className="mt-4 pt-4 border-t">
            <div className="text-sm text-gray-500">Total Sales</div>
            <div className="text-lg font-semibold">$6,459</div>
          </div>
        </div>
      </div>

        </div>
      </div>

      {/* Medicine Accounts */}
      <div className="mt-6">
        {/* <h2 className="text-2xl font-bold mb-4">Medicine Accounts</h2> */}
        <div className="grid gap-4 grid-cols-3">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Purchase Amount</CardTitle>
              <div className="h-8 w-8 rounded-full bg-blue-100/80 flex items-center justify-center">
                <TrendingUp className="h-5 w-5 text-blue-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹1,91,863.25</div>
              <p className="text-xs text-muted-foreground mt-1">Purchase Amount</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Settlement Amount</CardTitle>
              <div className="h-8 w-8 rounded-full bg-red-100/80 flex items-center justify-center">
                <TrendingDown className="h-5 w-5 text-red-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹694.75</div>
              <p className="text-xs text-muted-foreground mt-1">Settlement Amount</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Balance Amount</CardTitle>
              <div className="h-8 w-8 rounded-full bg-orange-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-orange-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹1,91,168.50</div>
              <p className="text-xs text-muted-foreground mt-1">Balance Amount</p>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Grocery Stock Management */}

      {/* Grocery Stock Management */}
      <div>
        <h2 className="text-2xl font-bold mb-4 text-left">Grocery Stock Management</h2>
        <div className="grid gap-4 grid-cols-4">
          <Card className="bg-green-50 border-green-200">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-green-800">In Stock Products</CardTitle>
              <div className="h-8 w-8 rounded-full bg-green-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-green-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-800">5</div>
            </CardContent>
          </Card>

          <Card className="bg-yellow-50 border-yellow-200">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-yellow-800">Low Stock Products</CardTitle>
              <div className="h-8 w-8 rounded-full bg-yellow-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-yellow-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-yellow-800">0</div>
            </CardContent>
          </Card>

          <Card className="bg-red-50 border-red-200">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-red-800">Out of Stock</CardTitle>
              <div className="h-8 w-8 rounded-full bg-red-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-red-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-800">0</div>
            </CardContent>
          </Card>

          <Card className="bg-blue-50 border-blue-200">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-blue-800">Total Products</CardTitle>
              <div className="h-8 w-8 rounded-full bg-blue-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-blue-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-800">5</div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Grocery Stock Accounts */}
      <div className="mt-6">
        {/* <h2 className="text-2xl font-bold mb-4">Grocery Stock Accounts</h2> */}
        <div className="grid gap-4 grid-cols-3">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Purchase Amount</CardTitle>
              <div className="h-8 w-8 rounded-full bg-blue-100/80 flex items-center justify-center">
                <TrendingUp className="h-5 w-5 text-blue-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹1,91,863.25</div>
              <p className="text-xs text-muted-foreground mt-1">Purchase Amount</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Settlement Amount</CardTitle>
              <div className="h-8 w-8 rounded-full bg-red-100/80 flex items-center justify-center">
                <TrendingDown className="h-5 w-5 text-red-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹694.75</div>
              <p className="text-xs text-muted-foreground mt-1">Settlement Amount</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Balance Amount</CardTitle>
              <div className="h-8 w-8 rounded-full bg-orange-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-orange-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹1,91,168.50</div>
              <p className="text-xs text-muted-foreground mt-1">Balance Amount</p>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* General Stock Management */}
      <div className="mt-6">
                <h2 className="text-2xl font-bold mb-4 text-left">General Stock Management</h2>

        <div className="grid gap-4 grid-cols-4">
          <Card className="bg-green-50 border-green-200">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-green-800">In Stock Products</CardTitle>
              <div className="h-8 w-8 rounded-full bg-green-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-green-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-800">{stats.inStockProducts}</div>
            </CardContent>
          </Card>

          <Card className="bg-yellow-50 border-yellow-200">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-yellow-800">Low Stock Products</CardTitle>
              <div className="h-8 w-8 rounded-full bg-yellow-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-yellow-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-yellow-800">{stats.lowStockProducts}</div>
            </CardContent>
          </Card>

          <Card className="bg-red-50 border-red-200">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-red-800">Out of Stock</CardTitle>
              <div className="h-8 w-8 rounded-full bg-red-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-red-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-800">{stats.outOfStockProducts}</div>
            </CardContent>
          </Card>

          <Card className="bg-blue-50 border-blue-200">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-blue-800">Total Balance Stock</CardTitle>
              <div className="h-8 w-8 rounded-full bg-blue-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-blue-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-800">{stats.inStockProducts + stats.lowStockProducts}</div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* General Purchase Accounts */}
      <div className="mt-6">
        {/* <h2 className="text-2xl font-bold mb-4">General Purchase Accounts</h2> */}
        <div className="grid gap-4 grid-cols-3">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Purchase Amount</CardTitle>
              <div className="h-8 w-8 rounded-full bg-blue-100/80 flex items-center justify-center">
                <TrendingUp className="h-5 w-5 text-blue-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹11,10,100.00</div>
              <p className="text-xs text-muted-foreground mt-1">Purchase Amount</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Settlement Amount</CardTitle>
              <div className="h-8 w-8 rounded-full bg-red-100/80 flex items-center justify-center">
                <TrendingDown className="h-5 w-5 text-red-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹1,50,000.00</div>
              <p className="text-xs text-muted-foreground mt-1">Settlement Amount</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium">Balance Amount</CardTitle>
              <div className="h-8 w-8 rounded-full bg-orange-100/80 flex items-center justify-center">
                <Package className="h-5 w-5 text-orange-600" />
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">₹9,60,100.00</div>
              <p className="text-xs text-muted-foreground mt-1">Balance Amount</p>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Lead Reminders */}
      <Card className="mt-6">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Clock className="h-5 w-5 mr-2" />
            Lead Reminders
          </CardTitle>
          <CardDescription>
            Upcoming reminders from Leads List
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {reminders.map((reminder) => (
              <div key={reminder.id} className="flex items-center justify-between p-3 rounded-lg border">
                <div className="space-y-1">
                  <p className="text-sm font-medium">{reminder.leadName}</p>
                  <div className="flex items-center text-xs text-muted-foreground">
                    <Calendar className="h-3 w-3 mr-1" />
                    {new Date(reminder.reminderDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric'
                    })}
                  </div>
                  <p className="text-xs text-muted-foreground">{reminder.type}</p>
                </div>
                <Badge 
                  className={cn(
                    reminder.status === 'Completed' && "bg-green-100 text-green-800",
                    reminder.status === 'Pending' && "bg-yellow-100 text-yellow-800",
                    reminder.status === 'Scheduled' && "bg-blue-100 text-blue-800"
                  )}
                >
                  {reminder.status}
                </Badge>
              </div>
            ))}
          </div>
          <div className="flex justify-between items-center mt-4">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
            >
              Previous
            </Button>
            <span className="text-sm text-muted-foreground">
              Page {currentPage}
            </span>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => prev + 1)}
              disabled={reminders.length <= remindersPerPage * currentPage}
            >
              Next
            </Button>
          </div>
        </CardContent>
      </Card>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        {/* Recent Activities */}
        <Card className="lg:col-span-4 backdrop-blur-sm bg-gradient-to-br from-white/50 to-gray-50/30 dark:from-gray-800/50 dark:to-gray-900/30 border border-gray-200/50 dark:border-gray-700/50 shadow-xl hover:shadow-2xl transition-all duration-300">
          <CardHeader className="pb-3">
            <CardTitle className="flex items-center text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400">
              <Activity className="h-6 w-6 mr-2 text-blue-500" />
              Recent Activities
            </CardTitle>
            <CardDescription className="text-gray-500 dark:text-gray-400 font-medium">
              Latest updates and activities in your healthcare system
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {recentActivities.map((activity) => (
              <div key={activity.id} 
                className="group flex items-center space-x-4 p-4 rounded-xl bg-gradient-to-r from-white/70 to-gray-50/70 dark:from-gray-800/70 dark:to-gray-700/70 border border-gray-100/80 dark:border-gray-600/80 shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-x-1">
                <div className="flex-shrink-0">
                  <div className={cn(
                    "p-3 rounded-xl transform transition-all duration-300 group-hover:scale-110",
                    activity.type === 'patient' && "bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900 dark:to-blue-800",
                    activity.type === 'medicine' && "bg-gradient-to-br from-purple-100 to-purple-200 dark:from-purple-900 dark:to-purple-800",
                    activity.type === 'appointment' && "bg-gradient-to-br from-green-100 to-green-200 dark:from-green-900 dark:to-green-800",
                    activity.type === 'staff' && "bg-gradient-to-br from-orange-100 to-orange-200 dark:from-orange-900 dark:to-orange-800"
                  )}>
                    {activity.type === 'patient' && <UserPlus className="h-6 w-6 text-blue-600 dark:text-blue-400" />}
                    {activity.type === 'medicine' && <Pill className="h-6 w-6 text-purple-600 dark:text-purple-400" />}
                    {activity.type === 'appointment' && <Calendar className="h-6 w-6 text-green-600 dark:text-green-400" />}
                    {activity.type === 'staff' && <Users className="h-6 w-6 text-orange-600 dark:text-orange-400" />}
                  </div>
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-base font-semibold text-foreground truncate tracking-tight">
                    {activity.text}
                  </p>
                  <p className="text-sm text-muted-foreground flex items-center mt-1 font-medium">
                    <Clock className="h-4 w-4 mr-1.5" />
                    {activity.time}
                  </p>
                </div>
              </div>
            ))}
          </CardContent>
        </Card>

        {/* Today's Schedule */}
        <Card className="lg:col-span-3 backdrop-blur-sm bg-gradient-to-br from-white/50 to-gray-50/30 dark:from-gray-800/50 dark:to-gray-900/30 border border-gray-200/50 dark:border-gray-700/50 shadow-xl hover:shadow-2xl transition-all duration-300">
          <CardHeader className="pb-3">
            <CardTitle className="flex items-center text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-green-600 to-emerald-600 dark:from-green-400 dark:to-emerald-400">
              <ClipboardCheck className="h-6 w-6 mr-2 text-green-500" />
              Today's Schedule
            </CardTitle>
            <CardDescription className="text-gray-500 dark:text-gray-400 font-medium">
              Upcoming appointments and procedures
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {todaySchedule.map((appointment) => (
              <div 
                key={appointment.id} 
                className="group flex items-center justify-between p-4 rounded-xl bg-gradient-to-r from-white/70 to-gray-50/70 dark:from-gray-800/70 dark:to-gray-700/70 border border-gray-100/80 dark:border-gray-600/80 shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-x-1"
              >
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <div className="p-1.5 rounded-lg bg-green-100 dark:bg-green-900">
                      <Clock className="h-4 w-4 text-green-600 dark:text-green-400" />
                    </div>
                    <span className="text-base font-semibold tracking-tight">{appointment.time}</span>
                  </div>
                  <div>
                    <p className="text-base font-medium text-foreground">{appointment.patient}</p>
                    <p className="text-sm text-muted-foreground flex items-center mt-1">
                      <Stethoscope className="h-4 w-4 mr-1.5" />
                      {appointment.doctor} • {appointment.type}
                    </p>
                  </div>
                </div>
                <div className="transform transition-all duration-300 group-hover:scale-105">
                  {appointment.status === 'confirmed' && (
                    <Badge className="bg-gradient-to-r from-green-100 to-green-200 text-green-800 dark:from-green-900 dark:to-green-800 dark:text-green-200 font-medium px-3 py-1">
                      Confirmed
                    </Badge>
                  )}
                  {appointment.status === 'pending' && (
                    <Badge className="bg-gradient-to-r from-yellow-100 to-yellow-200 text-yellow-800 dark:from-yellow-900 dark:to-yellow-800 dark:text-yellow-200 font-medium px-3 py-1">
                      Pending
                    </Badge>
                  )}
                  {appointment.status === 'cancelled' && (
                    <Badge className="bg-gradient-to-r from-red-100 to-red-200 text-red-800 dark:from-red-900 dark:to-red-800 dark:text-red-200 font-medium px-3 py-1">
                      Cancelled
                    </Badge>
                  )}
                </div>
              </div>
            ))}
          </CardContent>
        </Card>
      </div>

      {/* Regional Sales */}
      <div className="grid grid-cols-7 gap-6 mt-6">
        <div className="col-span-4 bg-white rounded-xl p-6 shadow-sm">
          <h2 className="text-lg font-semibold mb-4">Regional Sales</h2>
          <div className="flex justify-between items-center mb-6">
            <div className="grid grid-cols-3 gap-8">
              <div>
                <div className="text-sm text-gray-500 mb-1">Ohio</div>
                <div className="text-lg font-semibold">30.5%</div>
              </div>
              <div>
                <div className="text-sm text-gray-500 mb-1">Texas</div>
                <div className="text-lg font-semibold">19.3%</div>
              </div>
              <div>
                <div className="text-sm text-gray-500 mb-1">Florida</div>
                <div className="text-lg font-semibold">10.1%</div>
              </div>
            </div>
          </div>
          {/* Donut chart would go here */}
          <div className="h-64 w-full bg-gray-50 rounded-lg"></div>
        </div>

        <div className="col-span-3 bg-white rounded-xl p-6 shadow-sm">
          <h2 className="text-lg font-semibold mb-4">Sales by Customer Location</h2>
          {/* World map would go here */}
          <div className="h-64 w-full bg-gray-50 rounded-lg"></div>
        </div>
      </div>

      {/* Quick Actions */}
      <Card className="mt-6 bg-white shadow-sm">
        <CardHeader>
          <CardTitle className="text-lg font-semibold">
            <Heart className="h-6 w-6 mr-2 text-pink-500 inline" />
            Quick Actions
          </CardTitle>
          <CardDescription className="text-gray-500 dark:text-gray-400">
            Frequently used functions for healthcare management
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <Button 
              className="h-24 flex-col space-y-3 bg-gradient-to-br from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200"
            >
              <UserPlus className="h-7 w-7" />
              <span className="font-semibold">Add Patient</span>
            </Button>
            <Button 
              className="h-24 flex-col space-y-3 bg-gradient-to-br from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200"
            >
              <Calendar className="h-7 w-7" />
              <span className="font-semibold">Schedule Appointment</span>
            </Button>
            <Button 
              className="h-24 flex-col space-y-3 bg-gradient-to-br from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200"
            >
              <Pill className="h-7 w-7" />
              <span className="font-semibold">Add Medicine</span>
            </Button>
            <Button 
              className="h-24 flex-col space-y-3 bg-gradient-to-br from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-200"
            >
              <Stethoscope className="h-7 w-7" />
              <span className="font-semibold">Doctor Schedule</span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Dashboard;