// Temporarily using new enhanced version - this will be the main component
import PatientPaymentFeesNew from './PatientPaymentFeesNew';

export default PatientPaymentFeesNew;
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { toast } from '@/hooks/use-toast';
import MonthYearPickerDialog from '@/components/shared/MonthYearPickerDialog';
import { CalendarIcon, Search, Users, Download, CheckCircle, XCircle, Clock, RotateCcw, Trash2, UserCheck, UserX, Timer, ClockIcon, RefreshCw, Plus, ChevronLeft, ChevronRight, CreditCard, Edit2, User, Activity, Eye, Save, IndianRupee, History, X, AlertCircle, Stethoscope } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { format } from 'date-fns';
import { cn } from '@/lib/utils';
import * as XLSX from 'xlsx';
import LoadingScreen from '@/components/shared/LoadingScreen';
import usePageTitle from '@/hooks/usePageTitle';
import { getPatientPhotoUrl, PatientPhoto } from '@/utils/photoUtils';
import { PatientFeesAPI } from '@/utils/patientFeesAPI';
import '@/styles/global-crm-design.css';

interface Patient {
  id: string;
  name: string;
  phone: string;
  email: string;
  fees?: number;
  monthlyFees?: number;
  totalFees?: number;
  pickupCharge?: number;
  pickup_charge?: number;
  pickup?: number;
  bloodTest?: number;
  blood_test?: number;
  blood?: number;
  otherFees?: number;
  totalAmount?: number;
  admissionDate?: string;
  admission_date?: string;
  created_at?: string;
  payAmount?: number;
  pay_amount?: number;
  balance?: number;
  registrationId?: string;
  registration_id?: string;
  photo?: string;
  photoUrl?: string;
  total_paid?: string;
  advance_amount?: string;
  carry_forward?: string;
  payment_mode?: string;
  status?: string;
  join_date?: string;
}

interface PaymentHistory {
  id: string;
  payment_date: string;
  payment_amount: string;
  payment_mode: string;
  type: string;
  notes: string;
  created_at: string;
}

const PatientPaymentFees: React.FC = () => {
  // Set page title
  usePageTitle('Patient Payment Management');

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;
  const [patients, setPatients] = useState<Patient[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredPatients, setFilteredPatients] = useState<Patient[]>([]);
  const [loading, setLoading] = useState(true);
  
  // Enhanced functionality states (mirroring Staff Salary)
  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [paymentFormData, setPaymentFormData] = useState({
    date: new Date().toISOString().split('T')[0],
    amount: '',
    type: 'fee_payment'
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [paymentHistory, setPaymentHistory] = useState<PaymentHistory[]>([]);
  const [historyLoading, setHistoryLoading] = useState(false);
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());
  const [showMonthYearDialog, setShowMonthYearDialog] = useState(false);
  const [paymentModalSelectedMonth, setPaymentModalSelectedMonth] = useState(new Date().getMonth() + 1);
  const [paymentModalSelectedYear, setPaymentModalSelectedYear] = useState(new Date().getFullYear());
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [paymentToDelete, setPaymentToDelete] = useState<any>(null);
  const [deletingPayment, setDeletingPayment] = useState(false);

  const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  useEffect(() => {
    loadPatients();
  }, [selectedMonth, selectedYear]);

  useEffect(() => {
    filterPatients();
  }, [patients, searchTerm]);

  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, patients]);

  const filterPatients = () => {
    let filtered = patients;

    if (searchTerm) {
      filtered = patients.filter(patient =>
        patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        patient.id.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    // Sort patients by ID in ascending order
    filtered.sort((a, b) => {
      const getNum = (id: string) => {
        if (!id) return 0;
        const match = id.match(/P(\d+)/);
        return match ? parseInt(match[1], 10) : 0;
      };
      return getNum(a.id) - getNum(b.id);
    });
    
    setFilteredPatients(filtered);
  };

  const loadPatients = async () => {
    try {
      setLoading(true);
      const response = await PatientFeesAPI.getAll(selectedMonth, selectedYear);
      setPatients(response.data || []);
      setCurrentPage(1);
    } catch (error) {
      console.error('Error loading patient fees:', error);
      toast({
        title: "Error",
        description: "Failed to load patient fees data",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const refreshData = async () => {
    await loadPatients();
    toast({
      title: "Data Refreshed",
      description: "Patient fees data updated successfully",
    });
  };

  // Handle record payment modal
  const handleRecordPayment = (patient: Patient) => {
    setSelectedPatient(patient);
    setPaymentModalSelectedMonth(selectedMonth);
    setPaymentModalSelectedYear(selectedYear);
    setPaymentFormData({
      date: new Date().toISOString().split('T')[0],
      amount: '',
      type: 'fee_payment'
    });
    setShowPaymentModal(true);
    
    // Load payment history for selected patient
    fetchPaymentHistory(patient.id);
  };

  // Numeric parsing helper
  const parseNumeric = (value: string | number | undefined): number => {
    if (typeof value === 'number') return value;
    if (typeof value === 'string') {
      const cleaned = value.replace(/[^\d.-]/g, '');
      const parsed = parseFloat(cleaned);
      return isNaN(parsed) ? 0 : parsed;
    }
    return 0;
  };

  // Submit payment
  const handleSubmitPayment = async () => {
    if (!selectedPatient || !paymentFormData.amount || !paymentFormData.date) {
      toast({
        title: "Error",
        description: "Please fill in all required fields",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);
    try {
      await PatientFeesAPI.recordPayment({
        patientId: selectedPatient.id,
        amount: parseFloat(paymentFormData.amount),
        date: paymentFormData.date,
        type: paymentFormData.type,
        payment_mode: 'Bank Transfer'
      });

      toast({
        title: "Success",
        description: "Payment recorded successfully",
      });
      setPaymentFormData({
        date: new Date().toISOString().split('T')[0],
        amount: '',
        type: 'fee_payment'
      });
      loadPatients();
      if (selectedPatient) {
        fetchPaymentHistory(selectedPatient.id);
      }
    } catch (error) {
      console.error('Error recording payment:', error);
      toast({
        title: "Error",
        description: "Failed to record payment",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Check carry forward amounts for current month
  const checkCarryForward = async () => {
    try {
      await PatientFeesAPI.checkCarryForward(selectedMonth, selectedYear);
      toast({
        title: "Success",
        description: "Carry forward balances updated successfully",
      });
      loadPatients();
    } catch (error) {
      console.error('Error checking carry forward:', error);
      toast({
        title: "Error",
        description: "Failed to update carry forward balances",
        variant: "destructive",
      });
    }
  };

  // Get filtered payment history for selected month/year in modal
  const filteredPaymentHistory = useMemo(() => {
    return paymentHistory.filter(payment => {
      const paymentDate = new Date(payment.payment_date);
      const paymentMonth = paymentDate.getMonth() + 1;
      const paymentYear = paymentDate.getFullYear();
      return paymentMonth === paymentModalSelectedMonth && paymentYear === paymentModalSelectedYear;
    });
  }, [paymentHistory, paymentModalSelectedMonth, paymentModalSelectedYear]);

  // Calculate monthly total from payment history
  const calculateMonthlyTotal = () => {
    const total = filteredPaymentHistory.reduce((sum, payment) => {
      return sum + (parseFloat(payment.payment_amount) || 0);
    }, 0);
    return total;
  };

  // Get advance amount for selected patient
  const getAdvanceAmount = () => {
    if (!selectedPatient) return 0;
    const advanceAmount = parseNumeric(selectedPatient.advance_amount || 0);
    return advanceAmount;
  };

  // Calculate total paid (Monthly Total + Advance)
  const calculateTotalPaid = () => {
    const monthlyTotal = calculateMonthlyTotal();
    const advanceAmount = getAdvanceAmount();
    const totalPaid = monthlyTotal + advanceAmount;
    return totalPaid;
  };

  const fetchPaymentHistory = async (patientId: string) => {
    setHistoryLoading(true);
    try {
      const response = await PatientFeesAPI.getPaymentHistory(patientId);
      setPaymentHistory(response.data || []);
    } catch (error) {
      console.error('Error fetching payment history:', error);
      setPaymentHistory([]);
    } finally {
      setHistoryLoading(false);
    }
  };

  const handleDeletePayment = (payment: any) => {
    setPaymentToDelete(payment);
    setShowDeleteDialog(true);
  };

  const confirmDeletePayment = async () => {
    if (!paymentToDelete) return;

    try {
      setDeletingPayment(true);
      await PatientFeesAPI.deletePayment(paymentToDelete.id);
      
      toast({
        title: "Success",
        description: "Payment deleted successfully",
      });
      
      loadPatients();
      if (selectedPatient) {
        fetchPaymentHistory(selectedPatient.id);
      }
      
      setShowDeleteDialog(false);
      setPaymentToDelete(null);
    } catch (error) {
      console.error('Error deleting payment:', error);
      toast({
        title: "Error",
        description: "Failed to delete payment",
        variant: "destructive",
      });
    } finally {
      setDeletingPayment(false);
    }
  };

  // Save monthly records handler (mirroring Staff Salary functionality)
  const handleSaveMonthlyRecords = async () => {
    try {
      setLoading(true);
      
      // Get current month and year from the filter or use current date
      const month = selectedMonth;
      const year = selectedYear;
      
      const response = await PatientFeesAPI.saveMonthlyRecords(month, year);
      
      if (response.success) {
        const monthNames = [
          'January', 'February', 'March', 'April', 'May', 'June',
          'July', 'August', 'September', 'October', 'November', 'December'
        ];
        
        toast({
          title: "Success",
          description: `Monthly records saved successfully for ${monthNames[month-1]} ${year}! ${response.recordsProcessed || 0} patient records processed${response.carryForwardUpdates ? `, ${response.carryForwardUpdates} with carry-forward` : ''}`,
        });
        
        // Check if there are carry forward amounts and notify user
        if (response.carryForwardUpdates > 0) {
          setTimeout(() => {
            toast({
              title: "Carry Forward Notice",
              description: `${response.carryForwardUpdates} patients have balance amounts that will automatically carry forward to the next month`,
            });
          }, 1000);
        }
        
        // Refresh the data to show updated information
        loadPatients();
      } else {
        toast({
          title: "Error",
          description: response.message || 'Failed to save monthly records. Please try again.',
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error saving monthly records:', error);
      toast({
        title: "Error",
        description: 'Failed to save monthly records. Please check your connection and try again.',
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // Calculate stats from current patient data
  const calculateStats = () => {
    const totalPatients = filteredPatients.length;
    const totalFees = filteredPatients.reduce((sum, patient) => sum + (parseNumeric(patient.totalAmount) || 0), 0);
    const totalPaid = filteredPatients.reduce((sum, patient) => sum + (parseNumeric(patient.total_paid) || 0), 0);
    const totalPending = filteredPatients.reduce((sum, patient) => sum + (parseNumeric(patient.balance) || 0), 0);

    return {
      totalPatients,
      totalTestReportAmount: totalFees,
      totalPaid,
      totalPending
    };
  };

  const exportToExcel = () => {
    const exportData = filteredPatients.map((patient, index) => ({
      'S.No': index + 1,
      'Patient ID': patient.id,
      'Name': patient.name,
      'Phone': patient.phone,
      'Monthly Fees': `₹${parseNumeric(patient.monthlyFees)}`,
      'Other Fees': `₹${parseNumeric(patient.otherFees)}`,
      'Total Amount': `₹${parseNumeric(patient.totalAmount)}`,
      'Paid Amount': `₹${parseNumeric(patient.total_paid)}`,
      'Balance': `₹${parseNumeric(patient.balance)}`,
      'Carry Forward': `₹${parseNumeric(patient.carry_forward)}`,
      'Status': patient.status || 'Pending',
      'Admission Date': patient.admissionDate || ''
    }));

    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Patient Payment Fees');
    
    const monthName = months[selectedMonth - 1];
    const fileName = `Patient_Payment_Fees_${monthName}_${selectedYear}.xlsx`;
    XLSX.writeFile(wb, fileName);
    
    toast({
      title: "Export Successful",
      description: `Patient payment fees data exported to ${fileName}`,
    });
  };

  const totalPages = Math.ceil(filteredPatients.length / itemsPerPage);
  const paginatedPatients = filteredPatients.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  if (loading) {
    return <LoadingScreen />;
  }
      
      loadPatients();
      if (selectedPatient) {
        fetchPaymentHistory(selectedPatient.id);
      }
      
      setShowDeleteDialog(false);
      setPaymentToDelete(null);
    } catch (error) {
      console.error('Error deleting payment:', error);
      toast({
        title: "Error",
        description: "Failed to delete payment",
        variant: "destructive",
      });
    } finally {
      setDeletingPayment(false);
    }
  };

  // Save monthly records handler (mirroring Staff Salary functionality)
  const handleSaveMonthlyRecords = async () => {
    try {
      await saveMonthlyRecords();
      
      toast({
        title: "Success",
        description: `Monthly records saved successfully! Patient records processed with carry-forward`,
      });
    } catch (error) {
      console.error('Error saving monthly records:', error);
      toast({
        title: "Error",
        description: 'Failed to save monthly records. Please check your connection and try again.',
        variant: "destructive",
      });
    }
  };

  const exportToExcel = () => {
    const exportData = filteredPatients.map((patient, index) => ({
      'S.No': index + 1,
      'Patient ID': patient.id,
      'Name': patient.name,
      'Phone': patient.phone,
      'Email': patient.email,
      'Monthly Fees': `₹${parseNumeric(patient.monthlyFees).toLocaleString()}`,
      'Total Paid': `₹${parseNumeric(patient.total_paid).toLocaleString()}`,
      'Advance Amount': `₹${parseNumeric(patient.advance_amount).toLocaleString()}`,
      'Balance': `₹${parseNumeric(patient.balance).toLocaleString()}`,
      'Status': patient.status,
      'Admission Date': patient.admissionDate,
    }));

    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Patient Payment Report");
    
    const monthName = new Date(selectedYear, selectedMonth - 1).toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
    XLSX.writeFile(wb, `Patient_Payment_Report_${monthName.replace(' ', '_')}.xlsx`);
  };

  // Use stats from hook instead of calculating locally

  if (loading) {
    return <LoadingScreen message="Loading patient payment data..." />;
  }

  return (
    <div className="crm-page-bg">
      <div className="max-w-7xl mx-auto space-y-4 sm:space-y-6">
        {/* CRM Header */}
        <div className="crm-header-container">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-0">
            <div className="flex items-center gap-3">
              <div className="crm-header-icon">
                <CreditCard className="h-5 w-5 sm:h-6 sm:w-6 text-green-600" />
              </div>
              <div>
                <h1 className="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900">Patient Payment Management</h1>
              </div>
            </div>
            
            <div className="flex flex-col sm:flex-row gap-2 sm:gap-3 w-full sm:w-auto">
              <Button
                onClick={handleSaveMonthlyRecords}
                disabled={loading}
                className="global-btn flex-1 sm:flex-none text-xs sm:text-sm px-3 sm:px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700"
              >
                <Save className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                <span className="hidden sm:inline">Save Monthly</span>
                <span className="sm:hidden">Save</span>
              </Button>
              
              <ActionButtons.MonthYear
                onClick={() => setShowMonthYearDialog(true)}
                text={`${months[selectedMonth - 1]} ${selectedYear}`}
              />
              
              <Button 
                onClick={exportToExcel}
                className="global-btn flex-1 sm:flex-none text-xs sm:text-sm px-3 sm:px-4 py-2"
              >
                <Download className="h-3 w-3 sm:h-4 sm:w-4 mr-1 sm:mr-2" />
                <span className="hidden sm:inline">Export CSV</span>
                <span className="sm:hidden">Export</span>
              </Button>
              
              <ActionButtons.Refresh onClick={() => {
                console.log('🔄 Manual refresh triggered - refreshing entire page');
                window.location.reload();
              }} />
            </div>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="crm-stats-grid">
          <Card className="crm-stat-card crm-stat-card-blue">
            <CardContent className="relative p-3 sm:p-4 lg:p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0">
                  <p className="text-xs sm:text-sm font-medium text-blue-700 mb-1 truncate">Total Patients</p>
                  <p className="text-xl sm:text-2xl lg:text-3xl font-bold text-blue-900 mb-1">{stats.totalPatients}</p>
                  <div className="flex items-center text-xs text-blue-600">
                    <Activity className="w-3 h-3 mr-1 flex-shrink-0" />
                    <span className="truncate">Active</span>
                  </div>
                </div>
                <div className="crm-stat-icon crm-stat-icon-blue">
                  <Users className="w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6 text-white" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="crm-stat-card crm-stat-card-green">
            <CardContent className="relative p-3 sm:p-4 lg:p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0">
                  <p className="text-xs sm:text-sm font-medium text-green-700 mb-1 truncate">Total Fees</p>
                  <p className="text-xl sm:text-2xl lg:text-3xl font-bold text-green-900 mb-1">₹{stats.totalTestReportAmount.toLocaleString()}</p>
                  <div className="flex items-center text-xs text-green-600">
                    <IndianRupee className="w-3 h-3 mr-1 flex-shrink-0" />
                    <span className="truncate">Monthly</span>
                  </div>
                </div>
                <div className="crm-stat-icon crm-stat-icon-green">
                  <IndianRupee className="w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6 text-white" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="crm-stat-card crm-stat-card-purple">
            <CardContent className="relative p-3 sm:p-4 lg:p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0">
                  <p className="text-xs sm:text-sm font-medium text-purple-700 mb-1 truncate">Total Paid</p>
                  <p className="text-xl sm:text-2xl lg:text-3xl font-bold text-purple-900 mb-1">₹{stats.totalPaid.toLocaleString()}</p>
                  <div className="flex items-center text-xs text-purple-600">
                    <CheckCircle className="w-3 h-3 mr-1 flex-shrink-0" />
                    <span className="truncate">Completed</span>
                  </div>
                </div>
                <div className="crm-stat-icon crm-stat-icon-purple">
                  <CheckCircle className="w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6 text-white" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="crm-stat-card crm-stat-card-orange">
            <CardContent className="relative p-3 sm:p-4 lg:p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1 min-w-0">
                  <p className="text-xs sm:text-sm font-medium text-orange-700 mb-1 truncate">Total Pending</p>
                  <p className="text-xl sm:text-2xl lg:text-3xl font-bold text-orange-900 mb-1">₹{stats.totalPending.toLocaleString()}</p>
                  <div className="flex items-center text-xs text-orange-600">
                    <Clock className="w-3 h-3 mr-1 flex-shrink-0" />
                    <span className="truncate">Outstanding</span>
                  </div>
                </div>
                <div className="crm-stat-icon crm-stat-icon-orange">
                  <Clock className="w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6 text-white" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Search Controls */}
        <div className="crm-controls-container">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search patients by name or ID..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 w-full"
              />
            </div>
          </div>
        </div>

        {/* Patient Payment Table */}
        <Card className="crm-table-container">
          <CardHeader className="crm-table-header">
            <div className="crm-table-title">
              <CreditCard className="crm-table-title-icon" />
              <span className="crm-table-title-text">Patient Payment Management ({filteredPatients.length})</span>
              <span className="crm-table-title-text-mobile">Payments ({filteredPatients.length})</span>
            </div>
          </CardHeader>
          <CardContent className="p-0">
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow className="bg-gray-50/80 hover:bg-gray-50">
                    <TableHead className="text-center font-semibold text-gray-700">S.No</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Profile</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Admission Date</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Patient ID</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Patient Name</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Monthly Fees</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Other Fees</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Carry Forward</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Total Paid</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Balance</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Status</TableHead>
                    <TableHead className="text-center font-semibold text-gray-700">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredPatients.length > 0 ? (
                    filteredPatients.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).map((patient, index) => {
                      const balance = parseNumeric(patient.balance);
                      const advance = parseNumeric(patient.advance_amount);
                      const carryForward = parseNumeric(patient.carry_forward);
                      const totalPaid = parseNumeric(patient.total_paid);
                      const monthlyFees = parseNumeric(patient.monthlyFees);
                      const otherFees = parseNumeric(patient.otherFees);
                      const globalIndex = (currentPage - 1) * itemsPerPage + index + 1;
                      
                      return (
                        <TableRow 
                          key={patient.id} 
                          className="hover:bg-gray-50/80 transition-colors duration-200 group"
                        >
                          {/* S.No */}
                          <TableCell className="py-4 px-6 text-center font-medium text-gray-900">
                            {globalIndex}
                          </TableCell>
                          
                          {/* Profile */}
                          <TableCell className="py-4 px-6 text-center">
                            <div className="flex justify-center">
                              <PatientPhoto
                                photoPath={patient.photo}
                                alt={patient.name}
                                className="w-10 h-10 border-2 border-green-200 shadow-sm rounded-full object-cover"
                                showPlaceholder={true}
                              />
                            </div>
                          </TableCell>
                          
                          {/* Admission Date */}
                          <TableCell className="py-4 px-6 text-center">
                            <span className="text-sm text-gray-600">
                              {patient.admissionDate ? format(new Date(patient.admissionDate), 'dd/MM/yyyy') : '-'}
                            </span>
                          </TableCell>
                          
                          {/* Patient ID */}
                          <TableCell className="py-4 px-6 text-center">
                            <Badge variant="outline" className="text-blue-600 border-blue-200 bg-blue-50">
                              {patient.id}
                            </Badge>
                          </TableCell>
                          
                          {/* Patient Name */}
                          <TableCell className="py-4 px-6 text-center font-medium text-gray-900">
                            {patient.name}
                          </TableCell>
                          
                          {/* Monthly Fees */}
                          <TableCell className="py-4 px-6 text-center">
                            <span className="text-sm font-medium text-green-600">
                              ₹{monthlyFees.toLocaleString()}
                            </span>
                          </TableCell>
                          
                          {/* Other Fees */}
                          <TableCell className="py-4 px-6 text-center">
                            <span className="text-sm font-medium text-orange-600">
                              ₹{otherFees.toLocaleString()}
                            </span>
                          </TableCell>
                          
                          {/* Carry Forward */}
                          <TableCell className="py-4 px-6 text-center">
                            <span className="text-sm font-medium text-purple-600">
                              ₹{carryForward.toLocaleString()}
                            </span>
                          </TableCell>
                          
                          {/* Total Paid */}
                          <TableCell className="py-4 px-6 text-center">
                            <span className="text-sm font-medium text-blue-600">
                              ₹{totalPaid.toLocaleString()}
                            </span>
                          </TableCell>
                          
                          {/* Balance */}
                          <TableCell className="py-4 px-6 text-center">
                            <span className={`text-sm font-medium ${balance > 0 ? 'text-red-600' : 'text-green-600'}`}>
                              ₹{balance.toLocaleString()}
                            </span>
                          </TableCell>
                          
                          {/* Status */}
                          <TableCell className="py-4 px-6 text-center">
                            <Badge 
                              className={`text-xs ${balance > 0 ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}`}
                            >
                              {balance > 0 ? 'Pending' : 'Paid'}
                            </Badge>
                          </TableCell>
                          
                          {/* Actions */}
                          <TableCell className="py-4 px-6 text-center">
                            <div className="flex items-center justify-center gap-2">
                              <Button 
                                size="sm" 
                                variant="outline" 
                                onClick={() => handleRecordPayment(patient)}
                                className="action-btn-lead action-btn-add h-8 w-8 sm:h-9 sm:w-9 p-0"
                                title="Record Payment"
                              >
                                <CreditCard className="h-3 w-3" />
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      );
                    })
                  ) : (
                    <TableRow>
                      <TableCell colSpan={12} className="text-center py-12">
                        <div className="flex flex-col items-center justify-center space-y-4">
                          <div className="p-4 bg-gray-100 rounded-full">
                            <Users className="h-8 w-8 text-gray-400" />
                          </div>
                          <div className="text-center">
                            <h3 className="text-lg font-medium text-gray-900 mb-2">No patients found</h3>
                            <p className="text-gray-500">No patients match your search criteria.</p>
                          </div>
                        </div>
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>

            {/* Pagination */}
            {Math.ceil(filteredPatients.length / itemsPerPage) > 1 && (
              <div className="crm-pagination-container">
                <div className="text-xs sm:text-sm text-gray-600 order-2 sm:order-1">
                  <span className="hidden sm:inline">
                    Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, filteredPatients.length)} of {filteredPatients.length} patients
                  </span>
                  <span className="sm:hidden">
                    {currentPage} / {Math.ceil(filteredPatients.length / itemsPerPage)}
                  </span>
                </div>
                <div className="flex items-center gap-2 order-1 sm:order-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="bg-white hover:bg-gray-50 text-gray-600 border-gray-300 text-xs sm:text-sm px-2 sm:px-3"
                  >
                    <span className="hidden sm:inline">Previous</span>
                    <span className="sm:hidden">Prev</span>
                  </Button>
                  
                  <div className="hidden sm:flex items-center gap-1">
                    {Array.from({ length: Math.min(5, Math.ceil(filteredPatients.length / itemsPerPage)) }, (_, i) => {
                      const pageNumber = i + Math.max(1, currentPage - 2);
                      if (pageNumber > Math.ceil(filteredPatients.length / itemsPerPage)) return null;
                      return (
                        <Button
                          key={pageNumber}
                          variant={currentPage === pageNumber ? "default" : "outline"}
                          size="sm"
                          onClick={() => setCurrentPage(pageNumber)}
                          className={`w-8 h-8 p-0 text-xs ${
                            currentPage === pageNumber 
                              ? 'bg-blue-600 hover:bg-blue-700 text-white border-blue-600' 
                              : 'bg-white hover:bg-gray-50 text-gray-600 border-gray-300'
                          }`}
                        >
                          {pageNumber}
                        </Button>
                      );
                    })}
                  </div>
                  
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setCurrentPage(Math.min(Math.ceil(filteredPatients.length / itemsPerPage), currentPage + 1))}
                    disabled={currentPage === Math.ceil(filteredPatients.length / itemsPerPage)}
                    className="bg-white hover:bg-gray-50 text-gray-600 border-gray-300 text-xs sm:text-sm px-2 sm:px-3"
                  >
                    <span className="hidden sm:inline">Next</span>
                    <span className="sm:hidden">Next</span>
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Month Year Dialog */}
        <MonthYearPickerDialog
          open={showMonthYearDialog}
          onOpenChange={setShowMonthYearDialog}
          selectedMonth={selectedMonth}
          selectedYear={selectedYear}
          onMonthChange={setSelectedMonth}
          onYearChange={setSelectedYear}
          onApply={async () => {
            setShowMonthYearDialog(false);
            await applyFilter(); // Apply filter manually only when button is clicked
          }}
          title="Select Month & Year"
          description="Select month and year for patient payment data"
          previewText="patient records"
        />

        {/* Payment Modal */}
        <Dialog open={showPaymentModal} onOpenChange={setShowPaymentModal}>
          <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <CreditCard className="h-5 w-5 text-green-600" />
                Record Payment - {selectedPatient?.name}
              </DialogTitle>
              <DialogDescription>
                Record a new payment for {selectedPatient?.name} ({selectedPatient?.id})
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="payment-date">Payment Date</Label>
                  <Input
                    id="payment-date"
                    type="date"
                    value={paymentFormData.date}
                    onChange={(e) => setPaymentFormData(prev => ({...prev, date: e.target.value}))}
                  />
                </div>
                <div>
                  <Label htmlFor="payment-amount">Amount (₹)</Label>
                  <Input
                    id="payment-amount"
                    type="number"
                    placeholder="Enter amount"
                    value={paymentFormData.amount}
                    onChange={(e) => setPaymentFormData(prev => ({...prev, amount: e.target.value}))}
                  />
                </div>
              </div>
              
              <div>
                <Label htmlFor="payment-type">Payment Type</Label>
                <Select value={paymentFormData.type} onValueChange={(value) => setPaymentFormData(prev => ({...prev, type: value}))}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select payment type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="fee_payment">Fee Payment</SelectItem>
                    <SelectItem value="advance_payment">Advance Payment</SelectItem>
                    <SelectItem value="partial_payment">Partial Payment</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Payment History Section */}
              <div className="border-t pt-4">
                <h3 className="text-sm font-medium text-gray-900 mb-3 flex items-center gap-2">
                  <History className="h-4 w-4" />
                  Payment History
                </h3>
                
                {historyLoading ? (
                  <div className="text-center py-4">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto"></div>
                    <p className="text-sm text-gray-500 mt-2">Loading history...</p>
                  </div>
                ) : paymentHistory.length > 0 ? (
                  <div className="max-h-40 overflow-y-auto space-y-2">
                    {paymentHistory.map((payment) => (
                      <div key={payment.id} className="flex justify-between items-center p-2 bg-gray-50 rounded text-sm">
                        <div>
                          <span className="font-medium">₹{parseNumeric(payment.payment_amount).toLocaleString()}</span>
                          <span className="text-gray-500 ml-2">{format(new Date(payment.payment_date), 'dd/MM/yyyy')}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="text-xs">{payment.type}</Badge>
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => {
                              setPaymentToDelete(payment);
                              setShowDeleteDialog(true);
                            }}
                            className="h-6 w-6 p-0 text-red-500 hover:text-red-700"
                          >
                            <Trash2 className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-sm text-gray-500 py-4 text-center">No payment history found</p>
                )}
              </div>
            </div>

            <DialogFooter>
              <Button variant="outline" onClick={() => setShowPaymentModal(false)}>
                Cancel
              </Button>
              <Button onClick={handleSubmitPayment} disabled={isSubmitting}>
                {isSubmitting ? 'Recording...' : 'Record Payment'}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Delete Payment Dialog */}
        <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2 text-red-600">
                <AlertCircle className="h-5 w-5" />
                Delete Payment
              </DialogTitle>
              <DialogDescription>
                Are you sure you want to delete this payment record? This action cannot be undone.
              </DialogDescription>
            </DialogHeader>
            
            {paymentToDelete && (
              <div className="bg-gray-50 p-4 rounded-lg">
                <p><strong>Amount:</strong> ₹{parseNumeric(paymentToDelete.payment_amount).toLocaleString()}</p>
                <p><strong>Date:</strong> {format(new Date(paymentToDelete.payment_date), 'dd/MM/yyyy')}</p>
                <p><strong>Type:</strong> {paymentToDelete.type}</p>
              </div>
            )}

            <DialogFooter>
              <Button variant="outline" onClick={() => setShowDeleteDialog(false)}>
                Cancel
              </Button>
              <Button 
                variant="destructive" 
                onClick={handleDeletePayment} 
                disabled={deletingPayment}
              >
                {deletingPayment ? 'Deleting...' : 'Delete Payment'}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
};

export default PatientPaymentFees;
